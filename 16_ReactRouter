ReactJS Blog is like a full website
React helps to create SPAs (Single Page Applications)

Lets PREVIEW this project:
This offers a home page, with the feed that has different blog posts, 
we have a page for new posts, 
we have an about page, 
and if we go back to the feed we can click on any blog post
and get a page with the full post and the ability to delete the post 
We accomplish all of this with React Router 
And notice that as click on the different pages, the url does change 
however these pages are not requested from the server 
These are components that routed using React Router and therefor you
get an almost instanteous response which is also an excellent user experience.

For VSCode, the file tree shows in the src folder
src folder 	App.js
		index.css
		index.js
.gitignore
package-loc...
package.json
README.md

Terminal
$ npx create-react-app THEN_NAME_THE_FOLDERTOCREATE
$ npx create-react-app 16tut
enter

use VSCode to open the folder you created
then once you in the folder, you need to add one more dependency 
which is the react router
save this as a production dependency (ie b/c using npm and not npx)

$ npm i react-router-dom -S
enter

then go package.json file to see the depenedencies
including react-router-dom included in the dependencies

package.json

{
  "name": "16tut",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^11.2.7",
    "@testing-library/user-event": "^12.8.3",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^5.2.0",			<<<<<<<<<<<<<HERE
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"
    },
}


now close the package.json file

to clear out a react application you need to delete all the files in src except for

App.js
index.css
index.js

Then go into index.js
and remove the comments from line 13 onwards so only left with code on lines 1-11
and also remove the import for WebVitals as well				v 04.45.54

in the App.js
remove both imports and remove everything except for the basics

function App() {
  return (
    <div className="App">

    </div>
  );
}

export default App;

In package.json
Make sure you have installed the "react-rounter-dom": "^5.2.0"
react-router-dom dependency

Start this project by going to index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
						<<<<<<<ADD HERE
ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
  document.getElementById('root')
);

we need to import some things from react-router
we import BrowserRouter as Router so that we can just refer to it as Router
we also import Route

import { BrowserRouter as Router, Route } from 'react-router-dom';

and now inside the JSX (lines 7-12)
and add <Router></Router>
and then ending tag </Router> and cut paste to after the <App /> component
so the <App /> component is inside the Router
But note that we change the <App /> as well
Change <App /> to <Route />
and we add a path attribute path=""				<Route path=""
set it equal to the root path which is just a slash "/"		<Route path="/"
then we specify the component 					<Route path="/" component={}
then we add back in the App 	{App}				<Route path="/" component={App}

  <React.StrictMode>
    <App />
  </React.StrictMode>

  <React.StrictMode>
    <Router></Router>
    <App />
  </React.StrictMode>

  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>

  <React.StrictMode>
    <Router>
      <Route />
      <Route path="" />
      <Route path="/" />
      <Route path="/" component={} />
      <Route path="/" component={App} />
    </Router>
  </React.StrictMode>

so in the end we have specified the App component 
which will response to the root route 
for our Application
so now everything about our Application will now be inside React Router		v04.47.31
we will be able to use everything associated with React Router including 
some hooks taht come with the React Router DOM Package
 
so we have index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <Router>						<<<<<<INSIDE React Router
      <Route path="/" component={App} />		<<<<<<INSIDE
    </Router>						<<<<<<INSIDE
  </React.StrictMode>
  document.getElementById('root')
);


Now we move to the App.js file

how react router works is that it routes components 
sometimes we want components to stay on the page like 
a header or a nav bar or a footer but then
othertimes we want the main area of page to change
and react router can change them based upon url file paths
But before we can do that, we need to have these components created
and import them into our App
So we start out with some import statements 
to list out the components we are going to create
we import a Header from ./Header
then we import a Nav from ./Nav
then we import a Footer from ./Footer
now these three components will always stay on the page 
even when the other components change
so the Header Nav and Footer will stay consistent
But then after that we have a main area of the page 
which is actually the Main Element
where five components occupy the Main Element 
and note those five components will change
1) and one of those components we just call Home from ./Home
2) another component will be a page to create a NewPost ./NewPostS
3) another component will be a PostPage where we can see the full page from ./PostPage
4) note that Home gives us a small part of the Post
while PostPage gives us the full Post
another component will be an About page
5) and finally we want a page that shows up for a 404 error
this is basically page that doesnt exist
so four of these pages we want as part of the application
while the 5th one is to show errors
And then after this we need to import some things from React Router

Now these we will destructure here		import {}
We want Route 
We want Switch as we switch between the Routes
And then we want a Hook that comes with React Router and that is useHistory
React Router has several custom hooks
and this custom hook will allow us to access the browser history 
but note that React Router does not make requests from the server
as React Router just routes inside the App itself which has a faster response time
so it improves the user experience 
Now we need to import some hooks we will be using 
we import useState and useEffect from react
Now we are finished with the imports.

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router-dom';
import { useState, useEffect } from 'react';

so far we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router-dom';
import { useState, useEffect } from 'react';

function App() {
  return (
    <div className="App">

    </div>
  );
}

export default App;

We are not yet running the app b/c this would create errors as these components
dont yet exist
But now we can create, at least, the basics of each of these components to import into our App
and then begin to route them with react router

So now inside the source folder src we will start creating the components
So now inside the source folder src we will start creating the components  v04.51.07
//1 
Create new file Header.js
CONTROL ALT R
_rafce

const Header = () => {
  return (
    <div>

    </div>
  )
}

export default Header

now we have our functional Header component. Its a basic component
Change <div> tags to <Header> tags
Add an <h1> and text Header
Now CONTROL A to select all and copy

    <div>
    </div>
    <header>
        <h1></h1>
    </header>
    <header>
        <h1>Header</h1>
    </header>

so we have Header.js 

const Header = () => {
  return (
    <header>
        <h1>Header</h1>
    </header>
  )
}

export default Header

//2
Next new file to create is a Nav
New file called Nav.js
then paste copy from Header.js
and replace all Header with CONTROL D
Capital N in Nav is ok except inside the elements where 
its a smaller case n for the nav html element

so we have Nav.js

const Nav = () => {
  return (
    <nav>
        <h1>Nav</h1>
    </nav>
  )
}

export default Nav

Next new file to create is NewPost.js


//3
so we have NewPost.js
paste again
CONTROL D to select all NewPost text
change two elements to <main> from <NewPost>

so we have NewPost.js

const NewPost = () => {
  return (
    <main>
        <h1>NewPost</h1>
    </main>
  )
}

export default NewPost

//4
Next new file is to create a Home.js
paste again
change NewPost to Home
want to keep <main> element

so we have Home.js

const Home = () => {
  return (
    <main>
        <h1>Home</h1>
    </main>
  )
}

export default Home


//5
Next new file is to create an About.js
paste again
next change Home to About
keep component element as <main>

so we have About.js

const About = () => {
  return (
    <main>
        <h1>About</h1>
    </main>
  )
}

export default About


//6
Next new file is to create a PostPage.js
paste again
change to PostPage
change html element to <main>

so we have PostPage.js

const PostPage = () => {
  return (
    <main>
        <h1>PostPage</h1>
    </main>
  )
}

export default PostPage


//7 
Next new file is to create Missing.js
paste again
change to Missing
change html element to <main>

so we have Missing.js

const Missing = () => {
  return (
    <main>
        <h1>Missing</h1>
    </main>
  )
}

export default Missing


//8
Next new file is to create Footer.js
paste again
change to Footer
change html element to <footer>

so we have Footer.js

const Footer = () => {
  return (
    <footer>
        <h1>Footer</h1>
    </footer>
  )
}

export default Footer

now check the App.js import statements 
to verify we have all the new files created

1 import Header
2 import Nav
3 import Footer
4 import Home
5 import NewPost
6 import PostPage
7 import About
8 import Missing

from App.js
import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

v 04.55.27
so now we have all 8 and they are ready to be imported into the App.js page
so we are ready to use them
But before we put any routes in, 
lets go ahead and put all the components inside of our JSX

v04.55.39
lets go ahead and put all the components inside of our JSX
we have the Header component, Nav component, Home component, 
NewPost component, PostPage component, About component, 
Missing component, Footer component
This will not present an hmtl standard when we launch it
but this is in development so we will not be showing any one of
these five (Home, NewPost, PostPage, About, Missing) at the same time

     <div className="App">
     </div>
     <div className="App">
       <Header />
       <Nav />
       <Home />
       <NewPost />
       <PostPage />
       <About />
       <Missing />
       <Footer />
     </div>


so lets open a terminal window now
CONTROL `
type this in to start a dev server for our react app
so we can see how this renders
$ npm start

Now we can see our App to the right in Chrome localhost:3000 and we can 
see each component.
Now we are ready to set up Routing so 
we dont see all of these at the same time
Resize VSCode so we can see it with our Chrome dev version 
of the application at the same time
Close the terminal window
Note that we already put our App inside of the React.Dom function

From index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { BrowserRouter as Router, Route } from 'react-router-dom';

ReactDOM.render(
  <React.StrictMode>
    <Router>						<<<<<<INSIDE React Router
      <Route path="/" component={App} />		<<<<<<INSIDE
    </Router>						<<<<<<INSIDE
  </React.StrictMode>
  document.getElementById('root')
);

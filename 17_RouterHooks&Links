Now we have all of our routes specified inside of our App component
But today we need to build out the blog application 
and then work with React Router 
1) to handle links
2) to pull parameters from the url (custom hooks allows for this)
3) to in some custom hooks that come with the react router package such as useHistory
Go to index.css

this is the default index.css

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe
	'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'He
	sans-serif;  
  -webkit-font-smoothing: antialiased;
  -moz-osz-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consalas, 
    monospace;
}


CONTROL A to capture all and paste in this css file

https://github.com/gitdagray/learn_react_router/blob/main/src/index.css


@import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
}

body {
  min-height: 100vh;
  font-family: 'Open Sans', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: flex;
  background-color: #efefef;
}

#root {
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

.App {
  width: 100%;
  max-width: 800px;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  border: 1px solid #333;
  box-shadow: 0px 0px 15px gray;
}

.Header, .Footer {
  width: 100%;
  background-color: #66d8f5;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.Header h1 {
  font-size: 1.5rem;
}

.Header svg {
  font-size: 2rem;
}

.Footer {
  padding: 0.75rem;
  display: grid;
  place-content: center;
}

.Nav {
  width: 100%;
  background-color: #333;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}

.searchForm {
  width: 80%;
  padding: 1rem 0 0 0.75rem;
}

.searchForm input[type="text"] {
  font-family: 'Open Sans', sans-serif;
  width: 100%;
  min-height: 48px;
  font-size: 1rem;
  padding: 0.25rem;
  border-radius: 0.25rem;
  outline: none;
}

.searchForm label {
  position: absolute;
  left: -99999px;
}

.Nav ul {
  color: #fff;
  list-style-type: none;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
}

.Nav li {
  padding: 1rem;
}

.Nav li:hover, 
.Nav li:focus {
  padding: 1rem;
}

.Nav li a {
  color: #fff;
  text-decoration: none;
}

.Nav li:hover, 
.Nav li:focus, 
.Nav li:hover a, 
.Nav li:focus a  {
  background-color: #eee;
  color: #333;
}

.Nav li:hover a, 
.Nav li:focus a {
  cursor: pointer;
}

.Home, .NewPost, .PostPage, .About, .Missing {
  width: 100%;
  flex-grow: 1;
  padding: 1rem;
  overflow-y: auto;
  background-color: #fff;
}

.post {
  margin-top: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid lightgray;
}

.Home .post a {
  text-decoration: none;
}

.Home .post a, 
.Home .post a:visited {
  color: #000;
}

.post:first-child {
  margin-top: 0;
}

.post:last-child {
  border-bottom: none;
}

.postDate {
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.postBody {
  margin: 1rem 0;
}

.newPostForm {
  display: flex;
  flex-direction: column;
}

.newPostForm label {
  margin-top: 1rem;
}

.newPostForm input[type='text'], 
.newPostForm textarea {
  font-family: 'Open Sans', sans-serif;
  width: 100%;
  min-height: 48px;
  font-size: 1rem;
  padding: 0.25rem;
  border-radius: 0.25rem;
  margin-right: 0.25rem;
  outline: none;
}

.newPostForm textarea {
  height: 100px;
}

.newPostForm button {
  margin-top: 1rem;
  height: 48px;
  min-width: 48px;
  border-radius: 10px;
  padding: 0.5rem;
  font-size: 1rem;
  cursor: pointer;
}

.Missing h2, .PostPage h2, 
.Missing p, .PostPage p {
  margin-bottom: 1rem;
}

.PostPage button {
  height: 48px;
  min-width: 48px;
  border-radius: 0.25rem;
  padding: 0.5rem;
  font-size: 1rem;
  background-color: red;
  color: #fff;
  cursor: pointer;
}

.statusMsg {
  margin-top: 2rem;
}

@media only screen and (min-width: 610px) {
  html {
    font-size: 22px;
  }

  .Header h1 {
    font-size: 2rem;
  }

  .Nav {
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: space-between;
    align-items: center;
  }

  .Nav ul {
    text-align: right;
  }

  .Nav li:hover, 
  .Nav li:focus, 
  .Nav li:hover a, 
  .Nav li:focus a  {
    background-color: #eee;
    color: #333;
  }

  .searchForm {
    width: 50%;
    padding: .5rem 0;
  }
 
  .searchForm input[type="text"] {
    margin-left: 0.5rem;
  }

  .newPostForm textarea {
    height: 300px;
  }
}

@media only screen and (min-width: 992px) {

  .Header svg {
    font-size: 3rem;
  }

}


Now, given above css code and url is 		localhost:3000/abouts
we get centered

Header
Nav
Missing
Footer

We will focus on the react, not the css.
Close the css file.
Focus on App.js

from App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  return (
     <div className="App">
       <Header />
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	
...

The first component is a Header.
So lets go the Header.js file

we have Header.js 

const Header = () => {
  return (
    <header>
        <h1>Header</h1>
    </header>
  )
}

export default Header

The Header receives a title prop

const Header = () => {
const Header = ({}) => {
const Header = ({ title }) => {

we also add a header component className attribute

    <header>
    <header className>
    <header className="">
    <header className="Header">

and instead of Header in the h1, we will pass in the {title} prop to display

        <h1>Header</h1>
        <h1>{title}</h1>

we now have Header.js 

const Header = ({ title }) => {
  return (
    <header className="Header">
        <h1>{title}</h1>
    </header>
  )
}

export default Header

save
Note that we will get an error (ie its blank) b/c as of now we have not yet
passed in any title prop {title}

so then we go back to the App.js
here in the Header, we can now pass in the title prop


function App() {
  return (
     <div className="App">
       <Header />
       <Header title="React JS Blog"/>

save
and then now we see that title in Chrome

Header ------------->	React JS Blog (not centered)
Nav				Nav (centered)
Missing				Missing (centered)
Footer				Footer (centered)

so this is our Header for now

Lets move on the Nav.js
the Nav will receive { search, setSearch } b/c we will have
a search bar in the Nav as well as links for the menu

Nav.js file has

const Nav = () => {
  return (
    <nav>
        <h1>Nav</h1>
    </nav>
  )
}

export default Nav

updated code is

const Nav = () => {
const Nav = ({ search, setSearch }) => {

and instead of an h1 now
we do want to have the Nav elements 
but instead of the h1, we will have a form here for the search
and we will also have a menu
so delete the h1 line
add a className attribute="Nav"
so in the <form where we have our search
we will have a className="searchForm"				v05.06.14
add onSubmit={}
add onSubmit={}
add onSubmit={(e)} add event as e and this needs an anonymous function
and that e takes in the e.preventDefault()
b/c we want to prevent the default rendering 
and now close out the form tag

hide file tree CONTROL B to give more room

    <nav>
        <h1>Nav</h1>
    </nav>

    <nav className="Nav">			add className="Nav"
        <>					delete h1
    </nav>

    <nav className="Nav">
        <form >					add form
    </nav>

    <nav className="Nav">
        <form className="searchForm">		add className="searchForm"
    </nav>

    <nav className="Nav">
        <form className="searchForm" onSubmit= > 
        <form className="searchForm" onSubmit={} > 
        <form className="searchForm" onSubmit={(e)} > 
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}> 
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}></form> 
    </nav>

so far we have

const Nav = ({ search, setSearch }) => {
  return (
    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
        </form> 
    </nav>
  )
}

export default Nav

now inside the form, we always want to have a label
even if we dont show the label as we use css to take it off the screen
but that label will be part of the dom itself so screen readers can use it
so the label is htmlFor="search" and this search needs to match the id of the input
and then we add closing tag				</label>
add text for the label Search Posts 			Search Posts
then we add an input					<input
and each attribute for the input will be on a seperate lines
	    <input
	        id=
		...
		...
now we know that we need an id="search" to match the htmlFor from above
we also want to set the type to equal a "text" input
and then we need a placeholder					v05.07.30


        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
        </form> 

        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label
            <label htmlFor
            <label htmlFor=
            <label htmlFor="search"
            <label htmlFor="search"></label>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id=
	        id="serach"
	        type=
	        type="text"
	        placeholder=
	        placeholder=
        </form> 

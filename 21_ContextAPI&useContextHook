today we are not adding any new functionality to the blog application
instead we refactor

we start with App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import api from './api/posts';
import useWindowSize from './hooks/useWindowSize';		
import useAxiosFetch from './hooks/useAxiosFetch';

function App() {
  const [posts, setPosts] = useState([])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editBody, setEditBody] = useState('');
  const history = useHistory();
  const { width } = useWindowSize();

  const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');

  useEffect(() => {
    setPosts(data);  
  }, [data])

  useEffect(() => {
    const filteredResults = posts.filter(post => 
      ((post.body).toLowerCase()).includes(search.toLowerCase())
      || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filterResults.reverse());
  }, [posts, search])							

  const handleSubmit = (e) => {
    e.preventDefault();
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
    const datetime = format(new Date(), 'MMMM dd, yyyy pp');
    const newPost = { id, title: postTitle, datetime, body: postBody };
    try {
      const response = await api.post('/posts', newPost);
      const allPosts = [...posts, response.data];
      setPosts(allPosts);
      setPostTitle('');
      setPostBody('');
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  const handleDelete = async (id) => {
    try {
      await api.delete(`/posts/${id}`)
      const postsList = posts.filter(post => post.id !== id);
      setPosts(postsList);
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  return (
     <div className="App">
       <Header title="React JS Blog" width={width} />
       <Nav search={search} setSearch={setsearch} />
       <Switch>
         <Route exact path="/">
           <Home 				<<<<<<<<<<<<HERE
             posts={searchResults} 		<<<<<<<<<<<<HERE
             fetchError={fetchError}		<<<<<<<<<<<<HERE
             isLoading={isLoading}		<<<<<<<<<<<<HERE
           />					<<<<<<<<<<<<HERE
         </Route>
         <Route exact path="/post">
           <NewPost 
             handleSubmit={handleSubmit}
             postTitle={postTitle}
             setPostTitle={setPostTitle}
             postBody={postBody}
             setPostBody={setPostBody}
           />
         </Route>
         <Route path="/edit/:id">
           <EditPost
             posts={posts}		
             handleEdit={handleEdit}	
             editTitle={editTitle}	
             setEditTitle={setEditTitle}	
             editBody={editBody}	
             setEditBody={setEditBody}	
           />	

         <Route path="/post/:id">
           <PostPage posts={posts} handleDelete={handleDelete} />
         </Route>
         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}


v07.17.15

we will refactor useContext instead of drilling props down
as becomes cumbersome, see current App.js so 
1) refactor to create much neater App.js file
2) be able to subscribe to use the Context API and use useContext hook to pull in the info

v07.18.07

create new folder called 					context
create new file inside context folder called			DataContext.js

note you can have more than 1 Context per application
today we just create 1 to explain how it works
but imagine a 
User section where user entered information
Completely seperate Context to manage state

start with an import statement			
createContext from react
add import useState and useEffect as well

file DataContext.js 

import {}
import { createContext }
import { createContext } from 'react';
import { createContext, useState, useEffect } from 'react';

now define our DataContext
set this equal to createContext that we just imported
to start lets include an empty object {} inside createContext()

const DataContext
const DataContext = createContext
const DataContext = createContext()
const DataContext = createContext({});

the DataProvider will provide the data to our different components
then we export const DataProvider = ()
we need an arrow function here
inside the DataProvider are destructured children
destructured children refer to the component that within the DataProvider		({ children })
thus allowing the data to be available to the children of the DataProvider		({ children })
so now that we have defined the DataProvider lets add a return statement inside it	return ()

export 
export const DataProvider = () => {}
export const DataProvider = ({ children }) => {}
export const DataProvider = ({ children }) => {			

}

export const DataProvider = ({ children }) => {
    return ()
}

now we have JSX code					<
so then inside the return statement, we have
a DataContext.Provider					<DataContent.Provider
and then here we have a value={{}}
note we use 2 curly braces {{}}					v07.19.46
add extra line and then close out greater than symbol >

    return (
        <DataContent.Provider value={{
        //  put different values here, before passed as props, 
        //  data is now requested by useContext hook, pass through DataContext.Provider
        }}>
    )


now lets finish this function
add {children} in the JSX, 
then after children we closeout </DataContext.Provider> in the JSX
now save
add export default DataContext;

    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;


so skeleton file DataContext.js is
we will need to move state and anything else we want here
that will provide here into the DataProvider 

DataContext.js

import { createContext, useState, useEffect } from 'react';

const DataContext = createContext({});

export const DataProvider = ({ children }) => {
    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;


in App.js, we need to import our DataProvider
import { DataProvider } from './context/DataContext';
and now we can use the DataProvider to 
provide data to any of these components in the JSX 
such as 
          <Home 			
             posts={searchResults} 	
             fetchError={fetchError}	
             isLoading={isLoading}	
           />			
         </Route>
         <Route exact path="/post">
           <NewPost 
             handleSubmit={handleSubmit}
             postTitle={postTitle}
             setPostTitle={setPostTitle}
             postBody={postBody}
             setPostBody={setPostBody}
           />
         </Route>

but this JSX is still large as we have many props that we are drilling down
we will clean this up 
Now we want to put the DataProvider (as a wrapper) around all of the components
and then the components within can subscribe at will to the DataProvider
Now the DataProvider is a parent to all the components within (ie children)
And so now the data that comes from the DataProvider will be available to all the
components within if we choose to pull that data in using the useContext hook
(need to tab over all those lines)


So we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import api from './api/posts';
import useWindowSize from './hooks/useWindowSize';		
import useAxiosFetch from './hooks/useAxiosFetch';
import { DataProvider } from './context/DataContext';		<<<<<<<<<<<<<<<<<<HERE

function App() {
  const [posts, setPosts] = useState([])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editBody, setEditBody] = useState('');
  const history = useHistory();
  const { width } = useWindowSize();

  const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');

  useEffect(() => {
    setPosts(data);  
  }, [data])

  useEffect(() => {
    const filteredResults = posts.filter(post => 
      ((post.body).toLowerCase()).includes(search.toLowerCase())
      || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filterResults.reverse());
  }, [posts, search])							

  const handleSubmit = (e) => {
    e.preventDefault();
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
    const datetime = format(new Date(), 'MMMM dd, yyyy pp');
    const newPost = { id, title: postTitle, datetime, body: postBody };
    try {
      const response = await api.post('/posts', newPost);
      const allPosts = [...posts, response.data];
      setPosts(allPosts);
      setPostTitle('');
      setPostBody('');
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  const handleDelete = async (id) => {
    try {
      await api.delete(`/posts/${id}`)
      const postsList = posts.filter(post => post.id !== id);
      setPosts(postsList);
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  return (
     <div className="App">
       <DataProvider>					<<<<<<<<<<<<<<<HERE
       <Header title="React JS Blog" width={width} />
       <Nav search={search} setSearch={setsearch} />
       <Switch>
         <Route exact path="/">
           <Home 			
             posts={searchResults} 	
             fetchError={fetchError}	
             isLoading={isLoading}	
           />			
         </Route>
         <Route exact path="/post">
           <NewPost 
             handleSubmit={handleSubmit}
             postTitle={postTitle}
             setPostTitle={setPostTitle}
             postBody={postBody}
             setPostBody={setPostBody}
           />
         </Route>
         <Route path="/edit/:id">
           <EditPost
             posts={posts}		
             handleEdit={handleEdit}	
             editTitle={editTitle}	
             setEditTitle={setEditTitle}	
             editBody={editBody}	
             setEditBody={setEditBody}	
           />	

         <Route path="/post/:id">
           <PostPage posts={posts} handleDelete={handleDelete} />
         </Route>
         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
       </DataProvider>   	<<<<<<<<<<<<<<<<<<<<<<<<HERE
     </div>
  )
}



Now lets start moving all those lines of state over to the DataContext.js component
while we still leave it here as well so that we can keep the app working during the 
transition as we refactor.

Lets grab everything after the components here and move them to the DataContext.js file
and copy into DataContext.js below


So we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';	<<<<<<<<<<<<<<MOVE (ie copy and paste for now)
import { useState, useEffect } from 'react';			<<<<<<<<<<<<<<MOVE (ie copy and paste for now) 
import { format } from 'date-fns';				<<<<<<<<<<<<<<MOVE (ie copy and paste for now)
import api from './api/posts';					<<<<<<<<<<<<<<MOVE (ie copy and paste for now)
import useWindowSize from './hooks/useWindowSize';		<<<<<<<<<<<<<<MOVE (ie copy and paste for now)
import useAxiosFetch from './hooks/useAxiosFetch';		<<<<<<<<<<<<<<MOVE (ie copy and paste for now)
import { DataProvider } from './context/DataContext';

function App() {
  const [posts, setPosts] = useState([])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editBody, setEditBody] = useState('');
  const history = useHistory();
  const { width } = useWindowSize();

  const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');

  useEffect(() => {
    setPosts(data);  
  }, [data])

  useEffect(() => {
    const filteredResults = posts.filter(post => 
      ((post.body).toLowerCase()).includes(search.toLowerCase())
      || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filterResults.reverse());
  }, [posts, search])							

  const handleSubmit = (e) => {
    e.preventDefault();
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
    const datetime = format(new Date(), 'MMMM dd, yyyy pp');
    const newPost = { id, title: postTitle, datetime, body: postBody };
    try {
      const response = await api.post('/posts', newPost);
      const allPosts = [...posts, response.data];
      setPosts(allPosts);
      setPostTitle('');
      setPostBody('');
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  const handleEdit = async (id) => {
    const newPost = { id, title: postTitle, datetime, body: postBody };
    const updatedPost = { id, title: editTitle, datetime, body: editBody };
    try{
      const response = await api.put(`/posts/${id}`, updatePost);
      setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 
      setEditTitle('');	
      setEditBody('');	
      history.push('/');	
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  const handleDelete = async (id) => {
    try {
      await api.delete(`/posts/${id}`)
      const postsList = posts.filter(post => post.id !== id);
      setPosts(postsList);
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

  return (
     <div className="App">
       <DataProvider>					<<<<<<<<<<<<<<<HERE
       <Header title="React JS Blog" width={width} />
       <Nav search={search} setSearch={setsearch} />
       <Switch>
         <Route exact path="/">
           <Home 			
             posts={searchResults} 	
             fetchError={fetchError}	
             isLoading={isLoading}	
           />			
         </Route>
         <Route exact path="/post">
           <NewPost 
             handleSubmit={handleSubmit}
             postTitle={postTitle}
             setPostTitle={setPostTitle}
             postBody={postBody}
             setPostBody={setPostBody}
           />
         </Route>
         <Route path="/edit/:id">
           <EditPost
             posts={posts}		
             handleEdit={handleEdit}	
             editTitle={editTitle}	
             setEditTitle={setEditTitle}	
             editBody={editBody}	
             setEditBody={setEditBody}	
           />	

         <Route path="/post/:id">
           <PostPage posts={posts} handleDelete={handleDelete} />
         </Route>
         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
       </DataProvider>   
     </div>
  )
}



DataContext.js

import { createContext, useState, useEffect } from 'react';
import { Route, Switch, useHistory } from 'react-router'dom';	<<<<<<<<<<<<<<paste to here
import { useState, useEffect } from 'react';			<<<<<<<<<<<<<<paste to here
import { format } from 'date-fns';				<<<<<<<<<<<<<<paste to here
import api from './api/posts';					<<<<<<<<<<<<<<paste to here
import useWindowSize from './hooks/useWindowSize';		<<<<<<<<<<<<<<paste to here
import useAxiosFetch from './hooks/useAxiosFetch';		<<<<<<<<<<<<<<paste to here

const DataContext = createContext({});

export const DataProvider = ({ children }) => {
    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;


Then we can begin cleaning up this file

we can delete the useState, useEffect as we already got that
import { useState, useEffect } from 'react';			<<<<DELETE THIS LINE

we can delete the Route, Switch from line 2
we need to keep useHistory
import { Route, Switch, useHistory } from 'react-router'dom';
import { useHistory } from 'react-router'dom';	

we keep format
import { format } from 'date-fns';				

now when we get to the api, we need to recognize where this file is located
we need to consider where the file is located		v07.22.54
file tree shows  
	src folder
		context folder
			DataContext.js file
so we need to come up thus one dot .
then we need to come up again thus one dot . 	(ie two dots now)

import api from './api/posts';					
import api from '../api/posts';					

for the import hooks statements, its the same logic thus add a dot

import useWindowSize from './hooks/useWindowSize';		
import useAxiosFetch from './hooks/useAxiosFetch';		

import useWindowSize from '../hooks/useWindowSize';		
import useAxiosFetch from '../hooks/useAxiosFetch';		


thus so far we have 
DataContext.js

import { createContext, useState, useEffect } from 'react';
import { useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';				
import api from '../api/posts';					
import useWindowSize from '../hooks/useWindowSize';		
import useAxiosFetch from '../hooks/useAxiosFetch';		

const DataContext = createContext({});

export const DataProvider = ({ children }) => {
    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;

Next we go back to App.js and grab the rest of the needed info

1 grab all of the state we have 	(ie grab all the useState code lines)

  const [posts, setPosts] = useState([])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editBody, setEditBody] = useState('');
  const history = useHistory();
  const { width } = useWindowSize();


2 grab the Axios Fetch		(ie grab the useAxiosFetch)

  const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');


3 grab the useEffects as well

  useEffect(() => {
    setPosts(data);  
  }, [data])

  useEffect(() => {
    const filteredResults = posts.filter(post => 
      ((post.body).toLowerCase()).includes(search.toLowerCase())
      || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filterResults.reverse());
  }, [posts, search])							


and now inside the DataContext.js file
we add 123 inside the DataProvider
NOTE we also leave that same code if the App.js file as well
Why? to make sure the App.js continues working

456 we can also copy all of the 
4 handleSubmit, 
5 handleEdit, 
6 handleDelete
and copy this 456 into the DataContext.js as well 


DataContext.js

import { createContext, useState, useEffect } from 'react';
import { useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';				
import api from '../api/posts';					
import useWindowSize from '../hooks/useWindowSize';		
import useAxiosFetch from '../hooks/useAxiosFetch';		

const DataContext = createContext({});

export const DataProvider = ({ children }) => {
    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ADD HERE
    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;


so we have


DataContext.js

import { createContext, useState, useEffect } from 'react';
import { useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';				
import api from '../api/posts';					
import useWindowSize from '../hooks/useWindowSize';		
import useAxiosFetch from '../hooks/useAxiosFetch';		

const DataContext = createContext({});

export const DataProvider = ({ children }) => {
    const [posts, setPosts] = useState([])
    const [search, setSearch] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [postTitle, setPostTitle] = useState('');
    const [postBody, setPostBody] = useState('');
    const [editTitle, setEditTitle] = useState('');
    const [editBody, setEditBody] = useState('');
    const history = useHistory();
    const { width } = useWindowSize();

    const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');
 
    useEffect(() => {
        setPosts(data);  
    }, [data])

    useEffect(() => {
        const filteredResults = posts.filter(post => 
            ((post.body).toLowerCase()).includes(search.toLowerCase())
            || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filterResults.reverse());
    }, [posts, search])							


    const handleSubmit = (e) => {
        e.preventDefault();
        const id = post.length ? posts[posts.length - 1].id + 1 : 1;
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const newPost = { id, title: postTitle, datetime, body: postBody };
    try {
        const response = await api.post('/posts', newPost);
        const allPosts = [...posts, response.data];
        setPosts(allPosts);
        setPostTitle('');
        setPostBody('');
        history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

    const handleEdit = async (id) => {
      const newPost = { id, title: postTitle, datetime, body: postBody };
      const updatedPost = { id, title: editTitle, datetime, body: editBody };
    try{
      const response = await api.put(`/posts/${id}`, updatePost);
      setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 
      setEditTitle('');	
      setEditBody('');	
      history.push('/');	
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

    const handleDelete = async (id) => {
    try {
      await api.delete(`/posts/${id}`)
      const postsList = posts.filter(post => post.id !== id);
      setPosts(postsList);
      history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }

    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;


Note - if you have prior experience with React, then you might question why do this?
this is dumping everything into DataContext.js
We will get more organized later in this course
We can think about efficiency later in this course
Essentially we are taking 123456 (all the code from App.js) and moving it into our DataContext
v07.23.55


now at the bottom we are not providing anything yet
but we will
so now lets scroll down in App.js and the first thing we run across 
is the DataProvider Header title.
We can see the Header is receiving the width prop
as well as the title.
We will leave the title prop here as you can do both
both means (1) pass the prop down as a title
while (2) pulling the width data from the DataContext


  return (
     <div className="App">
       <DataProvider>		
       <Header title="React JS Blog" width={width} />		<<<<<<<<<<<<<<<HERE
       <Nav search={search} setSearch={setsearch} />
       <Switch>
         <Route exact path="/">
           <Home 			
             posts={searchResults} 	
             fetchError={fetchError}	
             isLoading={isLoading}	
           />			
         </Route>


so now v07.24.49 back in the DataContext we see this code

    return (
        <DataContent.Provider value={{

        }}>
            {children}
        </DataContext.Provider>
    )

}

export default DataContext;


we have already defined width above in DataContent.js
on line 19 

    const { width } = useWindowSize();

and now we pass it thru the DataProvider

so lets add width right here
(and if we provide more data then we need a comma after width like this

            width 
            width, moreData1, moreData2, moreData3



        <DataContent.Provider value={{

        }}>

        <DataContent.Provider value={{
            width 
        }}>


Now lets look at the Header.js file
v07.25.07
in order to use width from the DataContext, 
we need to remove width from the destructure here 
(ie from being passed in as a prop) 
so we have

const Header = ({ title, width }) => {
const Header = ({ title }) => {

lets add an import at the top of Header.js
this import will be to pull in useContext
this will be the same format as the other hooks from react
then we also need to import our DataContext that we defined earlier


import { FaLaptop, FaTabletAlt, FaMobileAlt } from 'react-icons/fa';

import {FaLaptop, FaTabletAlt, FaMobileAlt } from 'react-icons/fa';
import { useContext } from 'react';

import {FaLaptop, FaTabletAlt, FaMobileAlt } from 'react-icons/fa';
import { useContext } from 'react';						
import DataContext from './context/DataContext';			<<<<<<<<<<<IMPORT DataContext

so now that we have these, 
we need to define width as are no longer pulling width in as a destructured prop above
const width is set equal to useContext 
from the DataContext
So you can see how if you had more than one DataContext then you can
import it and then pass it in to the useContext hook
and in our case, we want the DataContext so we pass that in thru useContext hook
So notice that we are 
1 no longer passing down width (by prop drilling), instead we are
2 importing it and then defining it near the top of the 
function here just using the useContext hook

import DataContext from './context/DataContext';			<<<<<<<<<<<IMPORT DataContext
    const { width } = useContext(DataContext);				<<<<<<<<<<pass it in thru useContext hook


const Header = ({ title }) => {

const Header = ({ title }) => {
    const { }

const Header = ({ title }) => {
    const { width }

const Header = ({ title }) => {
    const { width } = useContext();

const Header = ({ title }) => {
    const { width } = useContext(DataContext);				<<<<<<<<<<pass it in thru useContext hook


save 

so now Header.js file looks like this

import { FaLaptop, FaTabletAlt, FaMobileAlt } from 'react-icons/fa';
import { useContext } from 'react';
import DataContext from './context/DataContext';

const Header = ({ title }) => {
    const { width } = useContext(DataContext);

    return (
        <header className="Header">
            <h1>{title}</h1>
            {width < 768 ? <FaMobileAlt />
                : width < 992 ? < FaTabletAlt />
                    : < FaLaptop />}
        </header>
    )
}

export default Header


v07.26.32

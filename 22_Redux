we refactor the blog
move state management from Context api
and move to Easy Peasy built on top of Redux

easy-peasy.vercel.app/docs/introduction/alternatives.html

package.json file

package.json

{
  "name": "22tut",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.14.1",		// we dont use these
    "@testing-library/react": "^11.2.7",		// we dont use these
    "@testing-library/user-event": "^12.8.3",		// we dont use these
    "axios": "^0.21.1",
    "date-fns": "^2.22.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-icons": "^4.2.0",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.1.2"				// we dont use these
    },
}


we will install easy-peasy
but first clean up package.json file
open VSCode terminal
we will paste the title of each file to be uninstalled with space between each name

$ npm uninstall @testing-library/jest-dom @testing-library/react @testing-library/user-event web-vitals

enter
this will remove them

now lets add easy-peasy
$ npm i easy-peasy
enter

package.json

{
  "name": "22tut",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "axios": "^0.21.1",
    "date-fns": "^2.22.1",
    "easy-peasy": "^5.0.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-icons": "^4.2.0",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    },
}


now start json server by typing
$ npx json-server -p 3500 -w data/db.json
enter

now it installs then launches

now in seperate bash terminal
$ npm start 
enter

once its running we are then ready to start making changes our blog application

today we dont change the functionality
we just refactor to use a different state management approach

in file tree, highlight the src folder
in the src folder at the same level as index.js
create new file called store.js
start with import statement to createStore 
we need action
we need thunk (which supports asynchronous actions)
we need computed (which are computed values of state)

import { createStore,
import { createStore, action, 
import { createStore, action, thunk, 
import { createStore, action, thunk, computed } from "easy-peasy";

we also need to import the api as our actions will contains the api actions
as we will pull some of the logic back into our easy-peasy store

import api from './api/posts';

then we need 
export default createStore({})
this is where we will keep all of our state and actions

so far we have store.js

import { createStore, action, thunk, computed } from "easy-peasy";
import api from './api/posts';

export default createStore({
    
});


we start with posts where the default state is the empty array
then we have setPosts: 

	action ( () => {} )		// in general

and here we have an action() that receives state			action((state, ))
action also receives a payload						action((state, payload))
then we have an arrow function here					action((state, payload) => )


export default createStore({
    posts: [], 
});

export default createStore({
    posts: [], 
    setPosts: action()
});

export default createStore({
    posts: [], 
    setPosts: action((state, payload))
});

export default createStore({
    posts: [], 
    setPosts: action((state, payload) => {})
});

export default createStore({
    posts: [], 
    setPosts: action((state, payload) => {
    })
});

now we have setPosts and an arrow function

Inside the arrow function we have state.posts
that equals the payload that is passed in
now save

export default createStore({
    posts: [], 
    setPosts: action((state, payload) => {
        state.posts = payload;
    })
});

now we will copy and paste in all the other state 
b/c its very repetitive
add comma then copy paste

export default createStore({
    posts: [], 
    setPosts: action((state, payload) => {
        state.posts = payload;
    }), 
    copy paste the other state in here		// same pieces of state over and over again
});


store.js so now we have 		v08.01.40

import { createStore, action, thunk, computed } from "easy-peasy";
import api from './api/posts';

export default createStore({
    posts: [], 
    setPosts: action((state, payload) => {
        state.posts = payload;
    }), 
    postTitle: '', 
    setPostTitle: action((state, payload) => {
        state.postTitle = payload;
    }),
    postBody: '', 
    setPostBody: action((state, payload) => {
        state.postBody = payload;
    }), 
    editTitle: '',
    setEditTitle: action((state, payload) => {
        state.editTitle = payload;
    }),
    editBody: '', 
    setEditBody: action((state, payload) => {
        state.editBody = payload;
    }), 
    search: '',
    setSearch: action((state, payload) => {
        state.search = payload;
    }), 
    searchResults: [],
    setSearchResults: action((state, payload) => {
        state.searchResults = payload;
    }), 
});


Review this is (1) state that we were previously keeping in components
and now (2) are pulling into our easy-peasy state store
b/c (3) we will have actions as well. (ie so pulling into state store b/c of actions)

now the first thing that we will define will still be state 
and this state will be a postCount which we have not yet done			postCount: computed()
Here easy-peasy lets us have computed values					postCount: computed(())
										postCount: computed((state))
so we pass in state and then add an arrow function
and we have state.posts.length which tells us how many posts we have

we also need a getPostById state
you might think this is an action			this = getPostById
but in fact its an action b/c it wont send the value 
but in fact will send us an anonymous function that we define here		v08.02.46
this anonymous function is returned and we get state.posts			return (id) => state.posts
so now we have state.posts.find()			state.posts.find()
and then we take each post				state.posts.find(post)
with an anonymous function				state.posts.find(post => ())
then we add each (post.id).toString			state.posts.find(post => (post.id).toString() === id);
and this strictly equals the id
    
    postCount: computed()

    postCount: computed(() => )

    postCount: computed((state) => state.posts.length),

    postCount: computed((state) => state.posts.length),
    getPostById: computed()

    postCount: computed((state) => state.posts.length),
    getPostById: computed((state) => {})

    postCount: computed((state) => state.posts.length),
    getPostById: computed((state) => {
    
    })

    postCount: computed((state) => state.posts.length),
    getPostById: computed((state) => {
        return ()    
    })

    postCount: computed((state) => state.posts.length),
    getPostById: computed((state) => {
        return (id) => state.posts.find(post => ())
    })

    postCount: computed((state) => state.posts.length),
    getPostById: computed((state) => {
        return (id) => state.posts.find(post => (post.id).toString() === id);
    })


so note that this 
        return (id) => state.posts.find(post => (post.id).toString() === id);
is also considered state b/c its returning 
        return
then anonymous function 
               (id) => state.posts.find(post => (post.id).toString() === id);
and that anonymous function will then take the id
to return the specific post that we want

now add a comma

    postCount: computed((state) => state.posts.length),
    getPostById: computed((state) => {
        return (id) => state.posts.find(post => (post.id).toString() === id);
    }),


now after the comma
we will create out thunk actions which are asynchronous actions
the first thunk action will be savePost
and it will start out with thunk()
then we have async()
then inside we pass actions, and we pass in whatever the payload is
note we can name this seperately as newPost but in the documentation we see payload
and then we also have helpers
and then add another arrow function
with the helpers we can deconstruct posts from the current state  	v08.03.56
    const { posts }		// so here we deconstruct posts from the current state
to use inside this thunk action
and this is from helpers.getState
    const { posts } = helpers.getState();
and now we have our posts


    }),
    savePost

    }),
    savePost: thunk()

    }),
    savePost: thunk(async ())

    }),
    savePost: thunk(async (actions, newPost, ))


    }),
    savePost: thunk(async (actions, newPost, helpers) => {})


    }),
    savePost: thunk(async (actions, newPost, helpers) => {		// with the helpers we can deconstruct

    })


    }),
    savePost: thunk(async (actions, newPost, helpers) => {		// with the helpers we can deconstruct
        const { posts } = helpers.getState()
    })


store.js is now				v08.04.12

import { createStore, action, thunk, computed } from "easy-peasy";
import api from './api/posts';

export default createStore({
    posts: [], 									// posts[]
    setPosts: action((state, payload) => {					// setPosts
        state.posts = payload;
    }), 
    postTitle: '', 								// postTitle
    setPostTitle: action((state, payload) => {					// setPostTitle
        state.postTitle = payload;
    }),
    postBody: '', 								// postBody
    setPostBody: action((state, payload) => {					// setPostBody
        state.postBody = payload;
    }), 
    editTitle: '',								// editTitle
    setEditTitle: action((state, payload) => {					// setEditTitle
        state.editTitle = payload;
    }),
    editBody: '', 								// editBody
    setEditBody: action((state, payload) => {					// setEditBody
        state.editBody = payload;
    }), 
    search: '',									// search
    setSearch: action((state, payload) => {					// setSearch
        state.search = payload;
    }), 
    searchResults: [],								// searchResults
    setSearchResults: action((state, payload) => {				// setSearchResults
        state.searchResults = payload;
    }), 
    postCount: computed((state) => state.posts.length),				// postCount
    getPostById: computed((state) => {						// getPostById
        return (id) => state.posts.find(post => (post.id).toString() === id);
    }),
    savePost: thunk(async (actions, newPost, helpers) => {			// savePost
        const { posts } = helpers.getState()
    })
});

v08.04.12

now the rest will be the try catch block that we previously had in the NewPost.js file
go to NewPost.js file
copy the try, catch block
and paste into savePost
and fix tabs

    const handleSubmit = async (e) => {
        e.preventDefault();
        const id = posts.length ? posts[posts.length - 1].id + 1 : 1;
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const newPost = { id, title: postTitle, datetime, body: postBody };
    try {
        const response = await api.post('/posts', newPost);
        const allPosts = [...posts, response.data];
        setPosts(allPosts);
        setPostTitle('');
        setPostBody('');
        history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }
  }


we need to a few changes the try catch block
our response line will be the same as we use the api and post the newPost that is passed id
we dont really need to define the allPosts variable
so we just cut the array we created and paste into setPosts(allPosts);		v08.05.02
now we need to add 		actions.setPosts
        setPosts(allPosts);					<<<<<< replace here [...posts, response.data]
        setPosts();
        setPosts([...posts, response.data]);
        actions.setPosts([...posts, response.data]);

then it pulls the action from above in the createStore function


    try {
        const response = await api.post('/posts', newPost);
//      const allPosts = [...posts, response.data];		<<<<<< delete this
        setPosts(allPosts);					<<<<<< replace here [...posts, response.data]
        setPostTitle('');
        setPostBody('');
        history.push('/');
    } catch (err) {
        console.log(`Error: ${err.message}`);
    }



store.js is now				v08.04.34

import { createStore, action, thunk, computed } from "easy-peasy";
import api from './api/posts';

export default createStore({
    posts: [], 									// posts[]
    setPosts: action((state, payload) => {					// setPosts
        state.posts = payload;
    }), 
    postTitle: '', 								// postTitle
    setPostTitle: action((state, payload) => {					// setPostTitle
        state.postTitle = payload;
    }),
    postBody: '', 								// postBody
    setPostBody: action((state, payload) => {					// setPostBody
        state.postBody = payload;
    }), 
    editTitle: '',								// editTitle
    setEditTitle: action((state, payload) => {					// setEditTitle
        state.editTitle = payload;
    }),
    editBody: '', 								// editBody
    setEditBody: action((state, payload) => {					// setEditBody
        state.editBody = payload;
    }), 
    search: '',									// search
    setSearch: action((state, payload) => {					// setSearch
        state.search = payload;
    }), 
    searchResults: [],								// searchResults
    setSearchResults: action((state, payload) => {				// setSearchResults
        state.searchResults = payload;
    }), 
    postCount: computed((state) => state.posts.length),				// postCount
    getPostById: computed((state) => {						// getPostById
        return (id) => state.posts.find(post => (post.id).toString() === id);
    }),
    savePost: thunk(async (actions, newPost, helpers) => {			// savePost
        const { posts } = helpers.getState()
        try {
            const response = await api.post('/posts', newPost);
            const allPosts = [...posts, response.data];
            setPosts(allPosts);
            setPostTitle('');
            setPostBody('');
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    })
});



then it pulls the action from above in the createStore function
 
    posts: [], 									
    setPosts: action((state, payload) => {		<<<<<<<pulls from here setPosts
        state.posts = payload;
    }), 




so we add delete the line above

//      const allPosts = [...posts, response.data];		<<<<<< delete this

and add actions.

            setPosts(allPosts);						
            actions.setPosts(allPosts);					<<<<< added actions.

so then we also need to add actions. to setPostTitle and setPostBody
from
            actions.setPosts(allPosts);					<<<<< added actions.
            setPostTitle('');
            setPostBody('');
to
            actions.setPosts(allPosts);					<<<<< added actions.
            actions.setPostTitle('');					<<<<< added actions.
            actions.setPostBody('');					<<<<< added actions.

so we have 	v08.05.18

    savePost: thunk(async (actions, newPost, helpers) => {			// savePost
        const { posts } = helpers.getState()
        try {
            const response = await api.post('/posts', newPost);
            actions.setPosts(allPosts);
            actions.setPostTitle('');
            actions.setPostBody('');
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    })
});

then we need to remove the history.push('/');
b/c that is a useHistory hook from react-router and the rule is
we can not call hooks inside of a store so that will need to occur back
in the component after this thunk action occurs


so we have 	v08.05.40

    savePost: thunk(async (actions, newPost, helpers) => {			// savePost
        const { posts } = helpers.getState()
        try {
            const response = await api.post('/posts', newPost);
            actions.setPosts(allPosts);
            actions.setPostTitle('');
            actions.setPostBody('');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    })
});


now we are ready for the next function which is deletePost
and it starts the same as savePost so we copy thunk(async 1st two lines
and change newPost payload to id
    deletePost: thunk(async (actions, newPost, helpers) => {
    deletePost: thunk(async (actions, id, helpers) => {	

and then we need to closing )};							// add )}

    }), 
    deletePost: thunk(async (actions, id, helpers) => {				// deletePost
        const { posts } = helpers.getState()
    });										// add });

v08.06.06

now we go to the PostPage.js that has our handleDelete function
and we copy paste the entire try,catch block into our store underneath deletePost

    }), 
    deletePost: thunk(async (actions, id, helpers) => {				// deletePost
        const { posts } = helpers.getState();
        // add try, catch block from handleDelete				// add try, catch block here
    });										// add });



    const handleDelete = async (id) => {
        try {									// copy from try to }
            await api.delete(`/posts/${id}`);
            const postsList = posts.filter(post => post.id !== id);
            setPosts(postsList);
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }									// to here }
    }


so we paste here
we have the api, 
we pass in an id
we dont need to define postsList like this as we can use prior line
		(post => post.id !== id)
and that () replaces the postsList which is defined in the prior line
from this
            const postsList = posts.filter(post => post.id !== id);
            setPosts(postsList);
to this
            setPosts(posts.filter(post => post.id !== id));			// paste into here

and we need to remove the history line					v08.06.46
            history.push('/');		// delete this line
so we leave history inside the component
and so now we have completed our deletePost thunk function

    }), 
    deletePost: thunk(async (actions, id, helpers) => {	
        const { posts } = helpers.getState();
        try {					
            await api.delete(`/posts/${id}`);
            setPosts(posts.filter(post => post.id !== id));
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    });	



store.js so we have 	v08.06.53

    savePost: thunk(async (actions, newPost, helpers) => {			// savePost
        const { posts } = helpers.getState()
        try {
            const response = await api.post('/posts', newPost);
            actions.setPosts(allPosts);
            actions.setPostTitle('');
            actions.setPostBody('');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    }), 
    deletePost: thunk(async (actions, id, helpers) => {	
        const { posts } = helpers.getState();
        try {					
            await api.delete(`/posts/${id}`);
            setPosts(posts.filter(post => post.id !== id));
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    }),

and now we before we finish we need to create the editPost thunk action
so copy paste the thunk( and const posts

	      thunk(async (actions, id, helpers) => {	
        const { posts } = helpers.getState();

and replace id with the payload called updatedPost
b/c its supposed to be edited and updated

    editPost: thunk(async (actions, id, helpers) => {	
    editPost: thunk(async (actions, updatedPost, helpers) => {	

add closing curly brace and parenthesis at the end of editPost
    })

so we have 

    }),
    editPost: thunk(async (actions, updatedPost, helpers) => {	
        const { posts } = helpers.getState();
    })

now we go to EditPost.js and find our handleEdit function
and copy the try/catch block

        try {
            const response = await api.put(`/posts/${id}`, updatedPost);
            setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 
            setEditTitle('');	
            setEditBody('');	
            history.push('/');	
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }


and then we go back to the store.js to paste this into editPost		v08.07.37
now we have our updatedPost passed in  
note we are also referencing an id which we dont have but we can get
from updatedPost or updatedPost.id				
or we can deconstruct from updatedPost 			// const { id } = updatedPost;
so updatedPost delivers the id thru deconstruction
and then just continue to reference like we have already inside our try/catch block
we need to add actions. to the setPosts line

           setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 	
           actions.setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 	
then copy paste actions. and apply to setEditTitle and setEditBody

            actions.setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 	// need id here
            setEditTitle('');	
            setEditBody('');	

            actions.setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 	// need id here
            actions.setEditTitle('');	
            actions.setEditBody('');	

we can remove the history line
            history.push('/');			// delete this line


so now we have completed our editPost thunk action

    }),
    editPost: thunk(async (actions, updatedPost, helpers) => {			// updatedPost passed in
        const { posts } = helpers.getState();
        const { id } = updatedPost;						// deconstructed from updatedPost
        try {
            const response = await api.put(`/posts/${id}`, updatedPost);		// can see it here
            actions.setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 	// need id here
            actions.setEditTitle('');	
            actions.setEditBody('');	
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    })


so our complete store.js file is


import { createStore, action, thunk, computed } from "easy-peasy";
import api from './api/posts';

export default createStore({
    posts: [], 								
    setPosts: action((state, payload) => {			
        state.posts = payload;
    }), 
    postTitle: '', 							
    setPostTitle: action((state, payload) => {				
        state.postTitle = payload;
    }),
    postBody: '', 						
    setPostBody: action((state, payload) => {					
        state.postBody = payload;
    }), 
    editTitle: '',								
    setEditTitle: action((state, payload) => {				
        state.editTitle = payload;
    }),
    editBody: '', 				
    setEditBody: action((state, payload) => {					
        state.editBody = payload;
    }), 
    search: '',							
    setSearch: action((state, payload) => {				
        state.search = payload;
    }), 
    searchResults: [],					
    setSearchResults: action((state, payload) => {				
        state.searchResults = payload;
    }), 
    postCount: computed((state) => state.posts.length),	
    getPostById: computed((state) => {			
        return (id) => state.posts.find(post => (post.id).toString() === id);
    }),
    savePost: thunk(async (actions, newPost, helpers) => {
        const { posts } = helpers.getState()
        try {
            const response = await api.post('/posts', newPost);
            actions.setPosts(allPosts);
            actions.setPostTitle('');
            actions.setPostBody('');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    }), 
    deletePost: thunk(async (actions, id, helpers) => {	
        const { posts } = helpers.getState();
        try {					
            await api.delete(`/posts/${id}`);
            setPosts(posts.filter(post => post.id !== id));
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    }),
    editPost: thunk(async (actions, updatedPost, helpers) => {
        const { posts } = helpers.getState();
        const { id } = updatedPost;
        try {
            const response = await api.put(`/posts/${id}`, updatedPost);
            actions.setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 
            actions.setEditTitle('');	
            actions.setEditBody('');	
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    })
});


so now we have the store.js file
and now we can remove the context api and context hooks

note that here we are only using 1 store but you can get more complex
and create individula models and then pull those individual models into a store
see documentation for more complex Easy-Peasy functionality


we need to add to index.js   v08.09.07
add import { StoreProvider } from 'easy-peasy';
we also need to import the store we just created from './store';
then right underneath <React.StrictMode>
we need to add the <StoreProvider store={store}></StoreProvider>
need to move the ending tag </StoreProvider> to just before </React.StrictMode> 
Then need to tab everything over
    <Router>
      <Route path="/" component={App} />
    </Router>

      <Router>
        <Route path="/" component={App} />
      </Router>


so our index.js now is

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { BrowserRouter as Router, Route } from 'react-router-dom';
import { StoreProvider } from 'easy-peasy';					// add
import store from './store';							// add

ReactDOM.render(
  <React.StrictMode>
    <StoreProvider store={store}>						// add
      <Router>									// tab over
        <Route path="/" component={App} />					// tab over
      </Router>									// tab over
    </StoreProvider>								// add
  </React.StrictMode>
  document.getElementById('root')
);


what is happening with StoreProvider?
StoreProvider provides all the store state that we have in the Application

save

now ready to move onto the App.js
remove import { DataProvider } context
remove       <DataProvider>
remove       </DataProvider>


BEFORE 

App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch } from 'react-router'dom';
import { DataProvider } from './context/DataContext';

function App() {

  return (
    <div className="App">
      <Header title="React JS Blog" />
      <DataProvider>
        <Nav />
        <Switch>
          <Route exact path="/" component={Home} />
          <Route exact path="/post" component={NewPost} />
          <Route path="/edit/:id" component={EditPost} />
          <Route path="/post/:id" component={PostPage} />
          <Route path="/about" component={About} />
          <Route path="*" component={Missing} />
        </Switch>
      </DataProvider>
      <Footer />
    </div>
  );
}


AFTER

App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch } from 'react-router'dom';

function App() {

  return (
    <div className="App">
      <Header title="React JS Blog" />
        <Nav />
        <Switch>
           <Route exact path="/" component={Home} />
          <Route exact path="/post" component={NewPost} />
          <Route path="/edit/:id" component={EditPost} />
          <Route path="/post/:id" component={PostPage} />
          <Route path="/about" component={About} />
          <Route path="*" component={Missing} />
        </Switch>
      <Footer />
    </div>
  );
}


ok so now we go back to the App context and move a couple things back into the App.js component
b/c we can not put the hook for the useAxiosFetch into our DataStore with easy-peasy

so we need to put our request for the initial data back into the App compenent
and we were doing this using our useAxiosFetch hook 
and useEffect hook to setPosts
from inside our DataContext.js

and so we can copy this

    const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');
 
    useEffect(() => {
        setPosts(data);  
    }, [data])


and so we also need to import useEffect and useAxiosFetch

import { createContext, useState, useEffect } from 'react';
import useAxiosFetch from './hooks/useAxiosFetch';		

and we have one other import from easy-peasy store which is 
useStoreActions from setPosts

import { useEffect } from 'react';								// add here
import useAxiosFetch from './hooks/useAxiosFetch';						// add here
import { Route, Switch } from 'react-router'dom';						// add here
import { useStoreActions } from 'easy-peasy';							// add here

now we need to add const setPosts with an arrow function
here we have const setPosts that is equal to useStoreActions
and it accepts the actions with arrow function

    const setPosts = useStoreActions((actions) => actions.setPosts);				// add here

so now we have import in
setPosts from our easy-peasy store
and we have useAxiosFetch hook

note we need to add setPosts as a dependency for useEffect

    useEffect(() => {	
        setPosts(data); 
    }, [data])		

    useEffect(() => {	
        setPosts(data); 
    }, [data, setPosts])					// add dependency here setPosts


now go to App.js to paste this in

App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { useEffect } from 'react';								// add here
import useAxiosFetch from './hooks/useAxiosFetch';						// add here
import { Route, Switch } from 'react-router'dom';						// add here
import { useStoreActions } from 'easy-peasy';							// add here

function App() {
    const setPosts = useStoreActions((actions) => actions.setPosts);				// add here
    const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');	// paste here
 
    useEffect(() => {										// paste here
        setPosts(data); 									// paste here 
    }, [data])											// paste here

  return (
    <div className="App">
      <Header title="React JS Blog" />
        <Nav />
        <Switch>
          <Route exact path="/" component={Home} />
          <Route exact path="/post" component={NewPost} />
          <Route path="/edit/:id" component={EditPost} />
          <Route path="/post/:id" component={PostPage} />
          <Route path="/about" component={About} />
          <Route path="*" component={Missing} />
        </Switch>
      <Footer />
    </div>
  );
}


so now we have imported in setPosts from our easy-peasy store
and we have our useAxiosFetch custom hook

function App() {
    const setPosts = useStoreActions((actions) => actions.setPosts);				// add here
    const { data, fetchError, isLoading } = useAxiosFetch('http://localhost:3500/posts');	// paste here


State Management vs Drilling Props

note that we are NOT using fetchError and NOT using isLoading YET
(and we dont want to set fetchError and isLoading back to the store as
those two can just be passed down. So notice you can still drill props 
eventhough you are using a state management library or package).

we edit the Home component from an exact path
           <Home
and inside the <Home component 
we pass isLoading equal to isLoading 
and we also pass the fetchError equal to fetchError			v08.13.24
then we close the Home tag

BEFORE
          <Route exact path="/" component={Home} />

AFTER
          <Route exact path="/">
            <Home
              isLoading={isLoading}
              fetchError={fetchError}
            />

also note that 

        <Switch>
          <Route exact path="/" component={Home} />
          <Route exact path="/post" component={NewPost} />


        <Switch>
          <Route exact path="/">
            <Home
              isLoading={isLoading}
              fetchError={fetchError}
            />
          </Route>
          <Route exact path="/post" component={NewPost} />


so now "everything" else we keep in State Management (ie easy-peasy) 
but these (ie isLoading and fetchError) we keep as Drilled Props

why "everything" is in quotes? b/c once we create ListItems then 
we will drill those props as well

so notice you can mix State Management and Drilling Props


Now look at the App.js component layout, we know that any component that will
use data or any information will be the Nav.js component as the Header does not really use any
So lets go directly to the Nav.js file

and we can see we are importing useContext and DataContext

import { Link } from 'react-router-dom';
import { useContext } from 'react';				// see here so delete
import DataContext from './context/DataContext';		// see here so delete

note that we should not need either of those now so delete them
but we will want to import useEffect from react
and we also need to import useStoreState and useStoreActions from easy-peasy

import { Link } from 'react-router-dom';
import { useEffect } from 'react';
import { useStoreState, useStoreActions } from 'easy-peasy';

then we need PULL IN SOME STATE from easy-peasy
previously we pulled in search and setSearch from the Context hook
we can delete that now
and we need more than that now
define const posts and set this equal to useStoreState 
which receives (state)					    const posts = useStoreState((state))
and then an arrow function with state.posts		                                        => state.posts)
    const posts = useStoreState((state) => state.posts);

const Nav = () => {
    const { search, setSearch } = useContext(DataContext);

const Nav = () => {
    const posts = useStoreState((state) => state.posts);

and we need a little more state so just copy that line a 2nd time
    const posts = useStoreState((state) => state.posts);
    const posts = useStoreState((state) => state.posts);

and replace posts with search that was previously received
    const search = useStoreState((state) => state.search);

now copy again a 3rd time
and change this to an action setSearch
replace useStoreState with useStoreActions and then pass in (actions)
    const setSearch = useStoreActions((actions) => actions.setSearch);

now copy a 4th time and instead of setSearch we use setSearchResults

    const setSearchResults = useStoreActions((actions) => actions.setSearchResults);

so now its Nav.js

import { Link } from 'react-router-dom';
import { useEffect } from 'react';
import { useStoreState, useStoreActions } from 'easy-peasy';

const Nav = () => {
    const posts = useStoreState((state) => state.posts);
    const search = useStoreState((state) => state.search);
    const setSearch = useStoreActions((actions) => actions.setSearch);
    const setSearchResults = useStoreActions((actions) => actions.setSearchResults);

    return (    
        <nav className="Nav">
            <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
                <label htmlFor="search">Search Posts</label>
	        <input
	            id="search"
	            type="text"
	            placeholder="Search Posts"
	            value={search}
	            onChange={(e) => setSearch(e.target.value)}
            </form> 
            <ul>
                <li><Link to="/">Home</li>
                <li><Link to="/post">Post</li>
                <li><Link to="/about">About</li>
            </ul> 
        </nav>
    )
}


v 08.16.04
now we have all of the state and actions that we should need 
pulled in from easy-peasy but we are not using them all yet
and not using useEffect

now in our store.js, we dont have any hooks in the store in our actions
as we can not use hooks in the store
but we did use hooks in the context

so now if go back to the Nav.js 
we need to pull our useEffect into the Nav.js
that was previously in our DataContext
so lets look at the DataContext.js
here is our useEffect hook that was helping to filter and set our search results

    useEffect(() => {
        const filteredResults = posts.filter(post => 
            ((post.body).toLowerCase()).includes(search.toLowerCase())
            || ((post.title).toLowerCase()).includes(search.toLowerCase()));

    setSearchResults(filterResults.reverse());
    }, [posts, search])							

so we can copy this
v08.16.29
Go back to Nav.js
and underneath Nav.js state, we can paste the useEffect copied code
Now inside useEffect dependencies we need to add setSearchResults as a dependency
so now everything is being used that we imported and thus are finished with this component
and check this visually for posts, search, setSearch, setSearchResults
and below in JSX for {} we can check for {search} and setSearch as well  v08.17.08
And now this is the end of the updates to the Nav.js component.
And thus now (below), we can move on to the Home.js component.

so now its Nav.js

import { Link } from 'react-router-dom';
import { useEffect } from 'react';
import { useStoreState, useStoreActions } from 'easy-peasy';

const Nav = () => {
    const posts = useStoreState((state) => state.posts);
    const search = useStoreState((state) => state.search);
    const setSearch = useStoreActions((actions) => actions.setSearch);
    const setSearchResults = useStoreActions((actions) => actions.setSearchResults);

    useEffect(() => {								// paste here
        const filteredResults = posts.filter(post => 				//
            ((post.body).toLowerCase()).includes(search.toLowerCase())		//
            || ((post.title).toLowerCase()).includes(search.toLowerCase()));	//
										//
        setSearchResults(filterResults.reverse());				//
    }, [posts, search, setSearchResults])					// add setSearchResults

    return (    
        <nav className="Nav">
            <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
                <label htmlFor="search">Search Posts</label>
	        <input
	            id="search"
	            type="text"
	            placeholder="Search Posts"
	            value={search}
	            onChange={(e) => setSearch(e.target.value)}
            </form> 
            <ul>
                <li><Link to="/">Home</li>
                <li><Link to="/post">Post</li>
                <li><Link to="/about">About</li>
            </ul> 
        </nav>
    )
}

And thus now, we can move on to the Home.js component.  v08.17.18
Looking at Home.js component

we can remove the useContext and DataContext imports
 
import Feed from './Feed';
import ( useContext } from 'react';				// delete this
import DataContext from './context/DataContext';		// delete this

const Home = () => {
    const { searchResults, fetchError, isLoading } = useContext(DataContext);  

    return (
        <main className="Home">
            {isLoading && <p className="statusMsg">Loading posts...</p>}
            {!isLoading && fetchError && <p className="statusMsg" style={{color: "red"}}>{fetchError}</p>}
            {!isLoading && !fetchError && (searchResults.length ? <Feed posts={searchResults} /> : <p className="statusMsg">No posts to display.</p>)}
        </main>
    )
}

export default Home

thus we have
and we import useStoreState from easy-peasy

import Feed from './Feed';
import { useStoreState } from 'easy-peasy';

const Home = () => {
    const { searchResults, fetchError, isLoading } = useContext(DataContext);  

    return (
        <main className="Home">
            {isLoading && <p className="statusMsg">Loading posts...</p>}
            {!isLoading && fetchError && <p className="statusMsg" style={{color: "red"}}>{fetchError}</p>}
            {!isLoading && !fetchError && (searchResults.length ? <Feed posts={searchResults} /> : <p className="statusMsg">No posts to display.</p>)}
        </main>
    )
}

export default Home


and now we are sending some props down
we are sending isLoading and fetchError

const Home = () => {
const Home = ({}) => {
const Home = ({ isLoading, fetchError }) => {


thus we have Home.js as

import Feed from './Feed';
import { useStoreState } from 'easy-peasy';

const Home = ({ isLoading, fetchError }) => {
    const { searchResults, fetchError, isLoading } = useContext(DataContext);  

    return (
        <main className="Home">
            {isLoading && <p className="statusMsg">Loading posts...</p>}
            {!isLoading && fetchError && <p className="statusMsg" style={{color: "red"}}>{fetchError}</p>}
            {!isLoading && !fetchError && (searchResults.length ? <Feed posts={searchResults} /> : <p className="statusMsg">No posts to display.</p>)}
        </main>
    )
}

export default Home

and then we need to change the const {} = useContext(DataContext) line
as we pull in the searchResults from our DataStore
and it uses useStoreState 
using (state) with an arrow function
and then it uses state.searchResults

    const { searchResults, fetchError, isLoading } = useContext(DataContext);  
    const { searchResults } = useContext(DataContext);
    const { searchResults } = useStoreState();  
    const { searchResults } = useStoreState((state) => );  
    const { searchResults } = useStoreState((state) => state.searchResults);

so we have Home.js as

import Feed from './Feed';
import { useStoreState } from 'easy-peasy';

const Home = ({ isLoading, fetchError }) => {
    const { searchResults } = useStoreState((state) => state.searchResults);

    return (
        <main className="Home">
            {isLoading && <p className="statusMsg">Loading posts...</p>}
            {!isLoading && fetchError && <p className="statusMsg" style={{color: "red"}}>{fetchError}</p>}
            {!isLoading && !fetchError && (searchResults.length ? <Feed posts={searchResults} /> : <p className="statusMsg">No posts to display.</p>)}
        </main>
    )
}

export default Home

we are finished now with Home.js
then we head to the PostPage.js 
where we will need to copy that import { useStoreState } from 'easy-peasy';
so we paste that useStoreState and useStoreActions 
and delete the DataContext line
import DataContext from './context/DataContext';
import { useStoreState, useStoreActions } from 'easy-peasy';

we dont need import useContext nor import api as that is now in a Thunk action

BEFORE

import { useParams, Link, useHistory } from "react-router-dom";		
import { useContext } from 'react';
import api from './api/posts';						
import DataContext from './context/DataContext';

AFTER

import { useParams, Link, useHistory } from "react-router-dom";		
import { useStoreState } from 'easy-peasy';				<<<<< add here 


so now we have PostPage.js	v08.18.48
so we have parred down the imports
next look at the state


import { useParams, Link, useHistory } from "react-router-dom";		
import { useStoreState, useStoreActions } from 'easy-peasy';		<<<<< add here 

const PostPage = () => {
    const { posts, setPosts } = useContext(DataContext);		<<<< posts needs to be shared but handleDelete does not
    const { id } = useParams();
    const history = useHistory();					<<<< add const history = useHistory();
    const post = posts.find(post => (post.id).toString() === id);
									<<<< add more room here  v07.49.52
    const handleDelete = async (id) => {
        try {
            await api.delete(`/posts/${id}`);
            const postsList = posts.filter(post => post.id !== id);
            setPosts(postsList);
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    }
    
    return (
      <main className="PostPage">
          <article className="post">
              {post && 
                  <>
                      <h2>{post.title}</h2>
                      <p className="postDate">{post.datetime}</p>
                      <p className="postBody">{post.body}</p>
		      <Link to={`/edit/${post.id}`}><button className="editButton">Edit Post</button></Link>
                      <button onClick={() => handleDelete(post.id)}>
                      <button clasName="deleteButton" onClick={() => handleDelete(post.id)}>
                          Delete Post
                      </button>
                  </>
              }
          </article>
      </main>
    )
}

export default PostPage




now we look at the state

the posts and setPosts can be eliminated
    const { posts, setPosts } = useContext(DataContext);		
and then we set our state underneath history and then we change how we get the individual posts as well
    const history = useHistory()
so right now in place of const history we add
const deletePost that receives useStoreActions using (actions) with an arrow function
    const deletePost = useStoreActions((actions) => actions.deletePost);

so we have 
and we need to address the second part of that "how we get the individual posts as well"
wherein we define v08.19.28
we getPostById using useStoreState and passing in the (state) into an arrow function
using state.getPostById
    const getPostById = useStoreState((state) => state.getPostById);

with the next line for how to get the individual posts, we already have that
logic inside our easy-peasy state, so we can delete this line
    const post = posts.find(post => (post.id).toString() === id);
so we just use
    const post = getPostById(id);
and for the (id) we get this from the statement useParams above
    const { id } = useParams();

so our state so far is -- see AFTER

BEFORE

    const { posts, setPosts } = useContext(DataContext);		
    const { id } = useParams();
    const history = useHistory();
    const post = posts.find(post => (post.id).toString() === id);

AFTER

    const { id } = useParams();
    const history = useHistory();
    const deletePost = useStoreActions((actions) => actions.deletePost);
    const getPostById = useStoreState((state) => state.getPostById);
    const post = getPostById(id);


we still need to resolve the const handleDelete function
we took the entire try catch block and moved it here but now we can eliminate all of it
but we need to keep our history here at the very end
        history.push('/');
and when the history push is complete, we will redirect the user to
the correct component or page
but before that history push we need to call deletePost(id) to pass in the id
that is passed into handleDelete

    const handleDelete = async (id) => {
        deletePost(id);
        history.push('/');
    }


BEFORE 

    const handleDelete = async (id) => {
        try {	
            await api.delete(`/posts/${id}`);
            const postsList = posts.filter(post => post.id !== id);
            setPosts(postsList);
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }				
    }

AFTER

    const handleDelete = async (id) => {
        deletePost(id);
        history.push('/');
    }


save
v08.20.36

before we test the delete function in Chrome app version
we need to update the NewPost.js component

so we copy these imports
import { useStoreState, useStoreActions } from 'easy-peasy';		<<<<< copy

and navigate to NewPost.js
we need to replace this DataContext import with the import from easy-peasy
copy and paste this into NewPost.js
import DataContext from './context/DataContext';			<<<<< replace this 
import { useStoreState, useStoreActions } from 'easy-peasy';		<<<<< with this copy

we should no longer need the API import
we will not need these either 	import ( useState, useContext } from 'react';		
so delete that line and move remove the empty line

Now we look at the state that should be inside the NewPost.js component
we previously had postTitle, postBody and posts all in the component
some of these are coming from the Context as in setPosts
while others postTitle and postBody were inside the component
we can delete these 3 as it all comes from easy-peasy

const NewPost = ({
    const [postTitle, setPostTitle] = useState('');		<<<<< delete this line
    const [postBody, setPostBody] = useState('');		<<<<< delete this line
    const { posts, setPosts } = useContext(DataContext);	<<<<< delete this line
    const history = useHistory();

so then we have 

const NewPost = ({
    const history = useHistory();

and then we need to add useStoreState which will have the state
and now you should be seeing the pattern
    const posts = useStoreState()
    const posts = useStoreState((state))
    const posts = useStoreState((state) => state.)
    const posts = useStoreState((state) => state.posts)

then we copy this line so we can more easily replace terms as needed

    const posts = useStoreState((state) => state.posts)
    const posts = useStoreState((state) => state.posts)
    const posts = useStoreState((state) => state.posts)

so far we have 
and then the 2nd posts line we change to postTitle
and then the 3rd posts line we change to postBody

const NewPost = ({
    const history = useHistory();

    const posts = useStoreState((state) => state.posts)				<<<< note the 2 cursor references
    const postTitle = useStoreState((state) => state.postTitle)			<<<< note change 2 cursor references
    const postBody = useStoreState((state) => state.postBody)			<<<< note change 2 cursor references

so now these 3 lines are the pieces of state

now we address our Store Actions
1st we create our savePost thunk action using useStoreAction
			       const savePost =
				     ^^^^^^^^
using the same pattern 				useStoreActions()
which receives (actions)			useStoreActions((actions))
then we add an arrow function with actions	useStoreActions((actions) =>)
						useStoreActions((actions) => actions.savePost)
										     ^^^^^^^^
so this results in the single line
    const savePost = useStoreActions((actions) => actions.savePost)

and now copy this line 3 times
    const savePost = useStoreActions((actions) => actions.savePost)
    const savePost = useStoreActions((actions) => actions.savePost)
    const savePost = useStoreActions((actions) => actions.savePost)

for 2nd line, we change savePost to setPostTitle
    const setPostTitle = useStoreActions((actions) => actions.setPostTitle)
thus its
    const savePost = useStoreActions((actions) => actions.savePost)
    const setPostTitle = useStoreActions((actions) => actions.setPostTitle)
    const savePost = useStoreActions((actions) => actions.savePost)

for 3rd line, we change savePost to setPostBody
    const setPostBody = useStoreActions((actions) => actions.setPostBody)
thus its 
    const savePost = useStoreActions((actions) => actions.savePost)
    const setPostTitle = useStoreActions((actions) => actions.setPostTitle)
    const setPostBody = useStoreActions((actions) => actions.setPostBody)


BEFORE

NewPost.js

import ( useState, useContext } from 'react';				<<<< we will not need these either
import useHistory from 'react-router-dom';
import { format } from 'date-fns';
import api from './api/posts';						<<<<< we no longer need this
import DataContext from './context/DataContext';			<<<<< we need to replace this

const NewPost = ({
    const [postTitle, setPostTitle] = useState('');
    const [postBody, setPostBody] = useState('');
    const { posts, setPosts } = useContext(DataContext);
    const history = useHistory();

    const handleSubmit = async (e) => {
        e.preventDefault();
        const id = posts.length ? posts[posts.length - 1].id + 1 : 1;
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const newPost = { id, title: postTitle, datetime, body: postBody };
        try {
            const response = await api.post('/posts', newPost);
            const allPosts = [...posts, response.data];
            setPosts(allPosts);
            setPostTitle('');
            setPostBody('');
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
     }


AFTER

NewPost.js

import useHistory from 'react-router-dom';
import { format } from 'date-fns';
import { useStoreState, useStoreActions } from 'easy-peasy';		<<<<< copy into this line

const NewPost = ({
    const history = useHistory();

    const posts = useStoreState((state) => state.posts)				<<<< note the 2 cursor references
    const postTitle = useStoreState((state) => state.postTitle)			<<<< note change 2 cursor references
    const postBody = useStoreState((state) => state.postBody)			<<<< note change 2 cursor references

    const savePost = useStoreActions((actions) => actions.savePost)
    const setPostTitle = useStoreActions((actions) => actions.setPostTitle)
    const setPostBody = useStoreActions((actions) => actions.setPostBody)

    const handleSubmit = async (e) => {
        e.preventDefault();
        const id = posts.length ? posts[posts.length - 1].id + 1 : 1;
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const newPost = { id, title: postTitle, datetime, body: postBody };
        try {
            const response = await api.post('/posts', newPost);
            const allPosts = [...posts, response.data];
            setPosts(allPosts);
            setPostTitle('');
            setPostBody('');
            history.push('/');
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
     }


now we need to look at the handleSubmit function to see what we just eliminated
we removed our try/catch block so we can remove all of it			v08.23.03
we need to add history.push('/'); to redirect the user as 
that could not be inside our state with easy-peasy
        history.push('/');
and now in line before history.push we can add savePost and pass in the new post
        savePost(newPost);
and once we save this
we can check the rendered App


BEFORE

    const handleSubmit = async (e) => {
        e.preventDefault();
        const id = posts.length ? posts[posts.length - 1].id + 1 : 1;
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const newPost = { id, title: postTitle, datetime, body: postBody };
        try {									<<<<< delete this try catch
            const response = await api.post('/posts', newPost);			<<<<< delete this try catch
            const allPosts = [...posts, response.data];				<<<<< delete this try catch
            setPosts(allPosts);							<<<<< delete this try catch
            setPostTitle('');							<<<<< delete this try catch
            setPostBody('');							<<<<< delete this try catch
            history.push('/');							<<<<< delete this try catch
        } catch (err) {								<<<<< delete this try catch
            console.log(`Error: ${err.message}`);				<<<<< delete this try catch
        }									<<<<< delete this try catch
     }


AFTER

    const handleSubmit = async (e) => {
        e.preventDefault();
        const id = posts.length ? posts[posts.length - 1].id + 1 : 1;
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const newPost = { id, title: postTitle, datetime, body: postBody };

        savePost(newPost);
        history.push('/');
     }



save
check rendered App
reload
go to individual post
create new post checking one two
go to Home
delete the post

its all working

so now we need to work on the EditPost.js component
look in file tree
open

EditPost.js

notice that its missing the import { useStoreState, useStoreActions } from 'easy-peasy';
from the PostPage.js component

we can copy that line from PostPage.js to EditPost.js
so go back to EditPost.js
adn paste over the DataContext line using import with useStoreState and useStoreActions from easy-peasy

EditPost.js is

BEFORE

import { useState, useEffect, useContext } from "react";	
import ( useParams, Link, useHistory } from "react-router-dom";	
import api from './api/posts';					
import { format } from 'date-fns';				
import DataContext from './context/DataContext';			<<<<< need to delete his

AFTER

import { useState, useEffect, useContext } from "react";		
import ( useParams, Link, useHistory } from "react-router-dom";	
import api from './api/posts';					
import { format } from 'date-fns';					
import { useStoreState, useStoreActions } from 'easy-peasy';		<<<< add this using copy paste


now can eliminate useState and useContext b/c we get state now from easy-peasy
we can also remove the api import as well


thus

import { useEffect } from "react";
import ( useParams, Link, useHistory } from "react-router-dom";	
import { format } from 'date-fns';					
import { useStoreState, useStoreActions } from 'easy-peasy';


lets now look at the state we need inside EditPost.js
we can move history and id to the top of the state

    const history = useHistory();
    const { id } = useParams();


BEFORE

const EditPost = () => {
    const [editTitle, setEditTitle] = useState('');		
    const [editBody, setEditBody] = useState('');		
    const { posts, setPosts } = useContext(DataContext);
    const history = useHistory();
    const { id } = useParams();

    const post = posts.find(post => (post.id).toString() === id);


AFTER

const EditPost = () => {
    const history = useHistory();
    const { id } = useParams();

    const [editTitle, setEditTitle] = useState('');		
    const [editBody, setEditBody] = useState('');		
    const { posts, setPosts } = useContext(DataContext);

    const post = posts.find(post => (post.id).toString() === id);


then we look at the rest of the state for if any changes needed

    const [editTitle, setEditTitle] = useState('');		
    const [editBody, setEditBody] = useState('');		
    const { posts, setPosts } = useContext(DataContext);

    const post = posts.find(post => (post.id).toString() === id);


we will need getPostById
so to make this more efficient, we go to NewPost that just updated with 
const posts, postTitle, postBody using useStoreState() and useStoreActions()
and with 
const savePost, setPostTitle, setPostBody
copy all 6 lines
    const posts = useStoreState((state) => state.posts)	
    const postTitle = useStoreState((state) => state.postTitle)	
    const postBody = useStoreState((state) => state.postBody)	

    const savePost = useStoreActions((actions) => actions.savePost)
    const setPostTitle = useStoreActions((actions) => actions.setPostTitle)
    const setPostBody = useStoreActions((actions) => actions.setPostBody)

and now go back to EditPost.js
and inside EditPost we can see editTitle, editBody, posts 
we see this here
const EditPost = () => {
    const history = useHistory();
    const { id } = useParams();

    const [editTitle, setEditTitle] = useState('');				<<<<< paste over this
    const [editBody, setEditBody] = useState('');				<<<<< paste over this
    const { posts, setPosts } = useContext(DataContext);			<<<<< paste over this

    const post = posts.find(post => (post.id).toString() === id);


paste it here
change postTitle to editTitle
    const postTitle = useStoreState((state) => state.postTitle)			
    const editTitle = useStoreState((state) => state.editTitle)			<<< changed postTitle to editTitle

change postBody to editBody
    const postBody = useStoreState((state) => state.postBody)			
    const editBody = useStoreState((state) => state.editBody)			<<< changed postBody to editBody

change savePost to editPost
    const savePost = useStoreActions((actions) => actions.savePost)		
    const editPost = useStoreActions((actions) => actions.editPost)		<<< changed savePost to editPost

then we will also need setEditTitle and setEditBody
    const setPostTitle = useStoreActions((actions) => actions.setPostTitle)	
    const setEditTitle = useStoreActions((actions) => actions.setEditTitle)	<<< changed setPostTitle to setEditTitle

    const setPostBody = useStoreActions((actions) => actions.setPostBody)	<<< 
    const setEditBody = useStoreActions((actions) => actions.setEditBody)	<<< changed setPostBody to setEditBody


const EditPost = () => {
    const history = useHistory();
    const { id } = useParams();

    const posts = useStoreState((state) => state.posts)			
    const editTitle = useStoreState((state) => state.editTitle)			<<< changed postTitle to editTitle
    const editBody = useStoreState((state) => state.editBody)			<<< changed postBody to editBody

    const editPost = useStoreActions((actions) => actions.editPost)		<<< changed savePost to editPost
    const setEditTitle = useStoreActions((actions) => actions.setEditTitle)	<<< changed setPostTitle to setEditTitle
    const setEditBody = useStoreActions((actions) => actions.setEditBody)	<<< changed setPostBody to setEditBody

    const post = posts.find(post => (post.id).toString() === id);

Refactor opprtunity here
note that we will getPostById so we dont need this line const posts at all so we can delete it

    const posts = useStoreState((state) => state.posts)			

go to PostPage.js to copy getPostById
    const getPostById = useStoreState((state) => state.getPostById);
    const post = getPostById(id);
 
thus we have 

const EditPost = () => {
    const history = useHistory();
    const { id } = useParams();

    const editTitle = useStoreState((state) => state.editTitle)			<<< changed postTitle to editTitle
    const editBody = useStoreState((state) => state.editBody)			<<< changed postBody to editBody

    const editPost = useStoreActions((actions) => actions.editPost)		<<< changed savePost to editPost
    const setEditTitle = useStoreActions((actions) => actions.setEditTitle)	<<< changed setPostTitle to setEditTitle
    const setEditBody = useStoreActions((actions) => actions.setEditBody)	<<< changed setPostBody to setEditBody

    const getPostById = useStoreState((state) => state.getPostById);		<<< pasted into here
    const post = getPostById(id);						<<< pasted into here


now we scroll down EditPost.js to look at our handleEdit function
we can remove the try/catch block	v08.27.20
we can still use history.push() thus add it
        history.push()
but instead of pushing back to the home page
lets instead push back to the id page to see if we like individual changes of that post
        history.push('')
        history.push('/post/$')
        history.push('/post/${id}');

still need to call editPost thunk async action
	// add line, need to call editPost thunk async action from easy-peasy
	editPost(updatedPost);

thus we have 

  const handleEdit = async (id) => {
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const updatedPost = { id, title: editTitle, datetime, body: editBody };
	// add line, need to call editPost thunk async action from easy-peasy
        history.push('/post/${id}');

  const handleEdit = async (id) => {
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const updatedPost = { id, title: editTitle, datetime, body: editBody };
	editPost(updatedPost);
        history.push('/post/${id}');


thus 

BEFORE
    const handleEdit = async (id) => {
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const updatedPost = { id, title: editTitle, datetime, body: editBody };
        try {
            const response = await api.put(`/posts/${id}`, updatedPost);
            setPosts(posts.map(post => post.id === id ? { ...response.data } : post)); 
            setEditTitle('');	
            setEditBody('');	
            history.push('/');	
        } catch (err) {
            console.log(`Error: ${err.message}`);
        }
    }


AFTER
    const handleEdit = async (id) => {
        const datetime = format(new Date(), 'MMMM dd, yyyy pp');
        const updatedPost = { id, title: editTitle, datetime, body: editBody };
	editPost(updatedPost);
        history.push('/post/${id}');
    }


now save
reload app
check for errors  v08.27.52
app should be working with easy-peasy
go to testing post
try to edit 4th post
add comments
ok
open dev tools
yes, see error Form submission canceled b/c the form is not working
try to add 5th post
add 5th post
try to edit it now
yes, still getting that DevTools form warning

lets go fix that 
scroll down to Edit Post button in EditPost.js
ie search for <textarea
try changing button type from "submit" to "button"

                        <button type="submit" onClick={() => handleEdit(post.id)} \>Submit</button>
                        <button type="button" onClick={() => handleEdit(post.id)} \>Submit</button>
				      ^^^^^^


                    <h2>Edit Post</h2>
                    <form className="newPostForm" onSubmit=>{(e) => e.preventDefault()}>
	                <label htmlFor="postTitle">Title:</label>
	                <input
	                    id="postTitle"
       	                    type="text"
	                    required
	                    value={editTitle}
	                    onChange={(e) => setEditTitle(e.target.value)}
     	                />
	                <label htmlFor="postBody">Post:</label>
	                <textarea
	                    id="postBody'
	                    required
	                    value={editBody} 
	                    onChange={(e) => setEditBody(e.target.value)}
	                />
                        <button type="button" onClick={() => handleEdit(post.id)} \>Submit</button>
                    </form>

save
clear DevTools console
retry reloaded app	v08.29.10
Try to edit 5th post now
add Post text
save
no more DevTools warning
go back to Home
try deleting
all works

now the only thing left to clean up is the DataContext
as we are no longer using DataContext at all
so we can delete the entire file
so we can also select the Context folder and delete it as well

if you want to organize your project even more, you could
create seperate folder for store and models 
and would need to import to those correctly
could also
create seperate components folder but not recommended to put
index.js or index.css in there
but all other components could be in a seperate folder
just need to route to those folders correctly

Next
thinking about handleFunctions that we created:
handleSubmit
handleEdit
handleDelete
and while it doesnt really make an impact on how it works,
we dont need to have the async keyword with those functions

so in PostPage.js can remove async keyword
b/c the thunk in easy-peasy store already has the async so we dont need it twice
also for NewPost.js handleSubmit function
also for EditPost.js handleEdit function


BEFORE 

const PostPage = () => {							
    const handleDelete = async (id) => {			<<<< remove async keyword

const NewPost 
    const handleSubmit = async (e) => {



AFTER 

const PostPage = () => {							
    const handleDelete = (id) => {

const NewPost 
    const handleSubmit = (e) => {


Now with all those changes,
we have one final change for the Footer	v08.31.37
and this change will allow us to use our last piece of state
add this 
import { useStoreState } from 'easy-peasy';

then we delete this			
and instead we add			
    const today = new Date();
    const postCount = useStoreState((state) => state.postCount);

and instead of the copyright
we just the total postCount for the blog like this
            <p>Copyright &copy; {today.getFullYear()}</p>
	    <p>{postCount} Blog Posts</p>


BEFORE Footer.js

import { useStoreState } from 'easy-peasy';

const Footer = () => {
    const today = new Date();						<<< replace this
    return {
        <footer className='Footer'>
            <p>Copyright &copy; {today.getFullYear()}</p>		<<< replace this
        </footer>
    }
}
export default footer


AFTER Footer.js

import { useStoreState } from 'easy-peasy';

const Footer = () => {
    const postCount = useStoreState((state) => state.postCount);	<<<<< HERE
    return {
        <footer className='Footer'>
	    <p>{postCount} Blog Posts</p>				<<<<< HERE
        </footer>
    }
}
export default footer


save
reload App
Footer now shows count
add post
it works

Now we have all of our routes specified inside of our App component
But today we need to build out the blog application 
and then work with React Router 
1) to handle links
2) to pull parameters from the url (custom hooks allows for this)
3) to in some custom hooks that come with the react router package such as useHistory
Go to index.css

this is the default index.css

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe
	'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'He
	sans-serif;  
  -webkit-font-smoothing: antialiased;
  -moz-osz-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consalas, 
    monospace;
}


CONTROL A to capture all and paste in this css file

https://github.com/gitdagray/learn_react_router/blob/main/src/index.css


@import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
}

body {
  min-height: 100vh;
  font-family: 'Open Sans', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: flex;
  background-color: #efefef;
}

#root {
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

.App {
  width: 100%;
  max-width: 800px;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  border: 1px solid #333;
  box-shadow: 0px 0px 15px gray;
}

.Header, .Footer {
  width: 100%;
  background-color: #66d8f5;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.Header h1 {
  font-size: 1.5rem;
}

.Header svg {
  font-size: 2rem;
}

.Footer {
  padding: 0.75rem;
  display: grid;
  place-content: center;
}

.Nav {
  width: 100%;
  background-color: #333;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}

.searchForm {
  width: 80%;
  padding: 1rem 0 0 0.75rem;
}

.searchForm input[type="text"] {
  font-family: 'Open Sans', sans-serif;
  width: 100%;
  min-height: 48px;
  font-size: 1rem;
  padding: 0.25rem;
  border-radius: 0.25rem;
  outline: none;
}

.searchForm label {
  position: absolute;
  left: -99999px;
}

.Nav ul {
  color: #fff;
  list-style-type: none;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
}

.Nav li {
  padding: 1rem;
}

.Nav li:hover, 
.Nav li:focus {
  padding: 1rem;
}

.Nav li a {
  color: #fff;
  text-decoration: none;
}

.Nav li:hover, 
.Nav li:focus, 
.Nav li:hover a, 
.Nav li:focus a  {
  background-color: #eee;
  color: #333;
}

.Nav li:hover a, 
.Nav li:focus a {
  cursor: pointer;
}

.Home, .NewPost, .PostPage, .About, .Missing {
  width: 100%;
  flex-grow: 1;
  padding: 1rem;
  overflow-y: auto;
  background-color: #fff;
}

.post {
  margin-top: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid lightgray;
}

.Home .post a {
  text-decoration: none;
}

.Home .post a, 
.Home .post a:visited {
  color: #000;
}

.post:first-child {
  margin-top: 0;
}

.post:last-child {
  border-bottom: none;
}

.postDate {
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.postBody {
  margin: 1rem 0;
}

.newPostForm {
  display: flex;
  flex-direction: column;
}

.newPostForm label {
  margin-top: 1rem;
}

.newPostForm input[type='text'], 
.newPostForm textarea {
  font-family: 'Open Sans', sans-serif;
  width: 100%;
  min-height: 48px;
  font-size: 1rem;
  padding: 0.25rem;
  border-radius: 0.25rem;
  margin-right: 0.25rem;
  outline: none;
}

.newPostForm textarea {
  height: 100px;
}

.newPostForm button {
  margin-top: 1rem;
  height: 48px;
  min-width: 48px;
  border-radius: 10px;
  padding: 0.5rem;
  font-size: 1rem;
  cursor: pointer;
}

.Missing h2, .PostPage h2, 
.Missing p, .PostPage p {
  margin-bottom: 1rem;
}

.PostPage button {
  height: 48px;
  min-width: 48px;
  border-radius: 0.25rem;
  padding: 0.5rem;
  font-size: 1rem;
  background-color: red;
  color: #fff;
  cursor: pointer;
}

.statusMsg {
  margin-top: 2rem;
}

@media only screen and (min-width: 610px) {
  html {
    font-size: 22px;
  }

  .Header h1 {
    font-size: 2rem;
  }

  .Nav {
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: space-between;
    align-items: center;
  }

  .Nav ul {
    text-align: right;
  }

  .Nav li:hover, 
  .Nav li:focus, 
  .Nav li:hover a, 
  .Nav li:focus a  {
    background-color: #eee;
    color: #333;
  }

  .searchForm {
    width: 50%;
    padding: .5rem 0;
  }
 
  .searchForm input[type="text"] {
    margin-left: 0.5rem;
  }

  .newPostForm textarea {
    height: 300px;
  }
}

@media only screen and (min-width: 992px) {

  .Header svg {
    font-size: 3rem;
  }

}


Now, given above css code and url is 		localhost:3000/abouts
we get centered

Header
Nav
Missing
Footer

We will focus on the react, not the css.
Close the css file.
Focus on App.js

from App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  return (
     <div className="App">
       <Header />
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	
...

The first component is a Header.
So lets go the Header.js file

we have Header.js 

const Header = () => {
  return (
    <header>
        <h1>Header</h1>
    </header>
  )
}

export default Header

The Header receives a title prop

const Header = () => {
const Header = ({}) => {
const Header = ({ title }) => {

we also add a header component className attribute

    <header>
    <header className>
    <header className="">
    <header className="Header">

and instead of Header in the h1, we will pass in the {title} prop to display

        <h1>Header</h1>
        <h1>{title}</h1>

we now have Header.js 

const Header = ({ title }) => {
  return (
    <header className="Header">
        <h1>{title}</h1>
    </header>
  )
}

export default Header

save
Note that we will get an error (ie its blank) b/c as of now we have not yet
passed in any title prop {title}

so then we go back to the App.js
here in the Header, we can now pass in the title prop


function App() {
  return (
     <div className="App">
       <Header />
       <Header title="React JS Blog"/>

save
and then now we see that title in Chrome

Header ------------->	React JS Blog (not centered)
Nav				Nav (centered)
Missing				Missing (centered)
Footer				Footer (centered)

so this is our Header for now

Lets move on the Nav.js
the Nav will receive { search, setSearch } b/c we will have
a search bar in the Nav as well as links for the menu

Nav.js file has

const Nav = () => {
  return (
    <nav>
        <h1>Nav</h1>
    </nav>
  )
}

export default Nav

updated code is

const Nav = () => {
const Nav = ({ search, setSearch }) => {

and instead of an h1 now
we do want to have the Nav elements 
but instead of the h1, we will have a form here for the search
and we will also have a menu
so delete the h1 line
add a className attribute="Nav"
so in the <form where we have our search
we will have a className="searchForm"				v05.06.14
add onSubmit={}
add onSubmit={}
add onSubmit={(e)} add event as e and this needs an anonymous function
and that e takes in the e.preventDefault()
b/c we want to prevent the default rendering 
and now close out the form tag

hide file tree CONTROL B to give more room

    <nav>
        <h1>Nav</h1>
    </nav>

    <nav className="Nav">			add className="Nav"
        <>					delete h1
    </nav>

    <nav className="Nav">
        <form >					add form
    </nav>

    <nav className="Nav">
        <form className="searchForm">		add className="searchForm"
    </nav>

    <nav className="Nav">
        <form className="searchForm" onSubmit= > 
        <form className="searchForm" onSubmit={} > 
        <form className="searchForm" onSubmit={(e)} > 
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}> 
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}></form> 
    </nav>

so far we have

const Nav = ({ search, setSearch }) => {
  return (
    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
        </form> 
    </nav>
  )
}

export default Nav

now inside the form, we always want to have a label
even if we dont show the label as we use css to take it off the screen
but that label will be part of the dom itself so screen readers can use it
so the label is htmlFor="search" and this search needs to match the id of the input
and then we add closing tag				</label>
add text for the label Search Posts 			Search Posts
then we add an input					<input
and each attribute for the input will be on a seperate lines
	    <input
	        id=
		...
		...
now we know that we need an id="search" to match the htmlFor from above
we also want to set the type to equal a "text" input
and then we need a placeholder this will say the same thing as the label v05.07.30
then we have value and set this equal to {search} and 
search is what we passed into this Nav.js as a prop thus its a controlled input
and then just like a controlled input, the onChange needs to set the search
and we do this with an anonymous function with the event e
and then we setSearch using setSearch and pass in e.target.value
and this makes this a controlled form input
then close the input tag

        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
        </form> 

        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label
            <label htmlFor
            <label htmlFor=
            <label htmlFor="search"
            <label htmlFor="search"></label>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id=
	        id="serach"
	        type=
	        type="text"
	        placeholder=
	        placeholder="Search Posts"
	        value=
	        value={search}
	        onChange=
	        onChange={() =>}
	        onChange={(e) => setSearch()}
	        onChange={(e) => setSearch(e.target.value)}
	    />
        </form> 

so far we have

const Nav = ({ search, setSearch }) => {
  return (
    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id="serach"
	        type="text"
	        placeholder="Search Posts"
	        value={search}
	        onChange={(e) => setSearch(e.target.value)}
	    />
        </form> 
    </nav>
  )
}

export default Nav


so we save
then we are going to have to create the search and setSearch back in the App
in order to pass those into the Nav component
But before we do that, we need to finish the Navigation within the Nav component
so we add an unordered list <ul>
and now each list item can be a navigation <li> link 
but we have not yet imported the link from react router yet so lets do that at the top
import { Link } from 'react-router-dom';

        </form> 
        <ul></ul> 
    </nav>

        </form> 
        <ul>
        </ul> 
    </nav>

        </form> 
        <ul>
            <li></li>
        </ul> 
    </nav>


so we have

import { Link } from 'react-router-dom';

const Nav = ({ search, setSearch }) => {
  return (    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id="serach"
	        type="text"
	        placeholder="Search Posts"
	        value={search}
	        onChange={(e) => setSearch(e.target.value)}
        </form> 
        <ul>
            <li></li>
        </ul> 
    </nav>
    </nav>
  )
}

export default Nav

now we save and this
and use the <Link as we import it
and links render to anchor tags just like we see in html such as <a href>
however here this tells react-router that 
"dont request this link from the server, just route to the proper component"
so now instead of an href="" we use a to="" and set the to equal a slash 
for our Home page
and so there we have the link to Home

            <li></li>
            <li><Link to=""></li>
            <li><Link to="/"></li>
            <li><Link to="/">Home</li>

now we use SHIFT ALT DOWNARROW to make 2 more links
and now we link these to other pages
we have a link to post and text is Post
and a link to about and text is About		v05.09.39

            <li><Link to="/">Home</li>
            <li><Link to="/">Home</li>
            <li><Link to="/">Home</li>

            <li><Link to="/">Home</li>
            <li><Link to="/post">Post</li>
            <li><Link to="/about">About</li>


so we have

import { Link } from 'react-router-dom';

const Nav = ({ search, setSearch }) => {
  return (    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id="serach"
	        type="text"
	        placeholder="Search Posts"
	        value={search}
	        onChange={(e) => setSearch(e.target.value)}
        </form> 
        <ul>
            <li><Link to="/">Home</li>
            <li><Link to="/post">Post</li>
            <li><Link to="/about">About</li>
        </ul> 
    </nav>
    </nav>
  )
}

export default Nav


and this will handle the links in our page
so we save these
and now we see the different links in the Chrome app 
where css has already applied itself and 
Links across the top of the app are		Home Post About
When you click Post then the page renders to NewPost
When you click Home then the page renders to Home
When you click About then the page renders to About 
so this shows that our links are working

Now we still have not yet created our state with search and setSearch
so lets go back to the App.js and do this
this means create our state with search and setSearch			v05.10.06

from App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}


To create our state with search and setSearch
we need to change the code inside App() function
we want to define both search and setSearch as arrays
and then we set that equal to useState and
we need an empty string for those as we start this
but then we will have search results that will be stored inside an array
Also while we are in App.js and creating state, we will need some data
to search thru and so for now, we will hard code our posts for this dev environment
and we can worry about hooking those posts to an API later.
We will have posts and setPosts for our blog posts
and this will equal useState
but this will have an array inside it []
so for now we will hardcode 4 posts
and we will just paste those 4 hardcoded posts in --> see below for pasted in code block.

  const []
  const [search, setSearch]
  const [search, setSearch] = 
  const [search, setSearch] = useState()
  const [search, setSearch] = useState('');

  const [posts,]
  const [search, setSearch] = useState('');

  const [posts, setPosts]
  const [search, setSearch] = useState('');

  const [posts, setPosts] = useState()
  const [search, setSearch] = useState('');


so we have 

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState()			<<<<<<<Hard code 4 posts into this useState()
  const [search, setSearch] = useState('');

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}



hard coded here
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }


so we have 

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])
  const [search, setSearch] = useState('');

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

so here you can see
its an array objects

[
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },

and each object is a post

        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },

and each post has 4 different properties id, title, datetime, and body.
These are 4 test posts.
So now we have posts and setPosts using state as well.

Now we need to create the other state 
we will start with an empty array for the search Results

  const [posts, setPosts] = useState()			<<<<<See above for 4 hardcoded posts
  const [search, setSearch] = useState('');		
  const []					<<<<<now in v05.11.33 we address other state

  const []		
  const [searchResults, setSearchResults]
  const [searchResults, setSearchResults] = useState()
  const [searchResults, setSearchResults] = useState([]);


so now we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

v05.12.01

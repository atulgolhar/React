Now we have all of our routes specified inside of our App component
But today we need to build out the blog application 
and then work with React Router 
1) to handle links
2) to pull parameters from the url (custom hooks allows for this)
3) to in some custom hooks that come with the react router package such as useHistory

Go to index.css

this is the default index.css

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe
	'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'He
	sans-serif;  
  -webkit-font-smoothing: antialiased;
  -moz-osz-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consalas, 
    monospace;
}


CONTROL A to capture all and paste in this css file

https://github.com/gitdagray/learn_react_router/blob/main/src/index.css


@import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
}

body {
  min-height: 100vh;
  font-family: 'Open Sans', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: flex;
  background-color: #efefef;
}

#root {
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

.App {
  width: 100%;
  max-width: 800px;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  border: 1px solid #333;
  box-shadow: 0px 0px 15px gray;
}

.Header, .Footer {
  width: 100%;
  background-color: #66d8f5;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.Header h1 {
  font-size: 1.5rem;
}

.Header svg {
  font-size: 2rem;
}

.Footer {
  padding: 0.75rem;
  display: grid;
  place-content: center;
}

.Nav {
  width: 100%;
  background-color: #333;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
}

.searchForm {
  width: 80%;
  padding: 1rem 0 0 0.75rem;
}

.searchForm input[type="text"] {
  font-family: 'Open Sans', sans-serif;
  width: 100%;
  min-height: 48px;
  font-size: 1rem;
  padding: 0.25rem;
  border-radius: 0.25rem;
  outline: none;
}

.searchForm label {
  position: absolute;
  left: -99999px;
}

.Nav ul {
  color: #fff;
  list-style-type: none;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
}

.Nav li {
  padding: 1rem;
}

.Nav li:hover, 
.Nav li:focus {
  padding: 1rem;
}

.Nav li a {
  color: #fff;
  text-decoration: none;
}

.Nav li:hover, 
.Nav li:focus, 
.Nav li:hover a, 
.Nav li:focus a  {
  background-color: #eee;
  color: #333;
}

.Nav li:hover a, 
.Nav li:focus a {
  cursor: pointer;
}

.Home, .NewPost, .PostPage, .About, .Missing {
  width: 100%;
  flex-grow: 1;
  padding: 1rem;
  overflow-y: auto;
  background-color: #fff;
}

.post {
  margin-top: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid lightgray;
}

.Home .post a {
  text-decoration: none;
}

.Home .post a, 
.Home .post a:visited {
  color: #000;
}

.post:first-child {
  margin-top: 0;
}

.post:last-child {
  border-bottom: none;
}

.postDate {
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

.postBody {
  margin: 1rem 0;
}

.newPostForm {
  display: flex;
  flex-direction: column;
}

.newPostForm label {
  margin-top: 1rem;
}

.newPostForm input[type='text'], 
.newPostForm textarea {
  font-family: 'Open Sans', sans-serif;
  width: 100%;
  min-height: 48px;
  font-size: 1rem;
  padding: 0.25rem;
  border-radius: 0.25rem;
  margin-right: 0.25rem;
  outline: none;
}

.newPostForm textarea {
  height: 100px;
}

.newPostForm button {
  margin-top: 1rem;
  height: 48px;
  min-width: 48px;
  border-radius: 10px;
  padding: 0.5rem;
  font-size: 1rem;
  cursor: pointer;
}

.Missing h2, .PostPage h2, 
.Missing p, .PostPage p {
  margin-bottom: 1rem;
}

.PostPage button {
  height: 48px;
  min-width: 48px;
  border-radius: 0.25rem;
  padding: 0.5rem;
  font-size: 1rem;
  background-color: red;
  color: #fff;
  cursor: pointer;
}

.statusMsg {
  margin-top: 2rem;
}

@media only screen and (min-width: 610px) {
  html {
    font-size: 22px;
  }

  .Header h1 {
    font-size: 2rem;
  }

  .Nav {
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: space-between;
    align-items: center;
  }

  .Nav ul {
    text-align: right;
  }

  .Nav li:hover, 
  .Nav li:focus, 
  .Nav li:hover a, 
  .Nav li:focus a  {
    background-color: #eee;
    color: #333;
  }

  .searchForm {
    width: 50%;
    padding: .5rem 0;
  }
 
  .searchForm input[type="text"] {
    margin-left: 0.5rem;
  }

  .newPostForm textarea {
    height: 300px;
  }
}

@media only screen and (min-width: 992px) {

  .Header svg {
    font-size: 3rem;
  }

}


Now, given above css code and url is 		localhost:3000/abouts
we get centered

Header
Nav
Missing
Footer

We will focus on the react, not the css.
Close the css file.
Focus on App.js

from App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  return (
     <div className="App">
       <Header />
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	
...

The first component is a Header.
So lets go the Header.js file

we have Header.js 

const Header = () => {
  return (
    <header>
        <h1>Header</h1>
    </header>
  )
}

export default Header

The Header receives a title prop

const Header = () => {
const Header = ({}) => {
const Header = ({ title }) => {

we also add a header component className attribute

    <header>
    <header className>
    <header className="">
    <header className="Header">

and instead of Header in the h1, we will pass in the {title} prop to display

        <h1>Header</h1>
        <h1>{title}</h1>

we now have Header.js 

const Header = ({ title }) => {
  return (
    <header className="Header">
        <h1>{title}</h1>
    </header>
  )
}

export default Header

save
Note that we will get an error (ie its blank) b/c as of now we have not yet
passed in any title prop {title}

so then we go back to the App.js
here in the Header, we can now pass in the title prop


function App() {
  return (
     <div className="App">
       <Header />
       <Header title="React JS Blog"/>

save
and then now we see that title in Chrome

Header ------------->	React JS Blog (not centered)
Nav				Nav (centered)
Missing				Missing (centered)
Footer				Footer (centered)

so this is our Header for now

Lets move on the Nav.js
the Nav will receive { search, setSearch } b/c we will have
a search bar in the Nav as well as links for the menu

Nav.js file has

const Nav = () => {
  return (
    <nav>
        <h1>Nav</h1>
    </nav>
  )
}

export default Nav

updated code is

const Nav = () => {
const Nav = ({ search, setSearch }) => {

and instead of an h1 now
we do want to have the Nav elements 
but instead of the h1, we will have a form here for the search
and we will also have a menu
so delete the h1 line
add a className attribute="Nav"
so in the <form where we have our search
we will have a className="searchForm"				v05.06.140
add onSubmit={}
add onSubmit={}
add onSubmit={(e)} add event as e and this needs an anonymous function
and that e takes in the e.preventDefault()
b/c we want to prevent the default rendering 
and now close out the form tag

hide file tree CONTROL B to give more room

    <nav>
        <h1>Nav</h1>
    </nav>

    <nav className="Nav">			add className="Nav"
        <>					delete h1
    </nav>

    <nav className="Nav">
        <form >					add form
    </nav>

    <nav className="Nav">
        <form className="searchForm">		add className="searchForm"
    </nav>

    <nav className="Nav">
        <form className="searchForm" onSubmit= > 
        <form className="searchForm" onSubmit={} > 
        <form className="searchForm" onSubmit={(e)} > 
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}> 
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}></form> 
    </nav>

so far we have

const Nav = ({ search, setSearch }) => {
  return (
    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
        </form> 
    </nav>
  )
}

export default Nav

now inside the form, we always want to have a label
even if we dont show the label as we use css to take it off the screen
but that label will be part of the dom itself so screen readers can use it
so the label is htmlFor="search" and this search needs to match the id of the input
and then we add closing tag				</label>
add text for the label Search Posts 			Search Posts
then we add an input					<input
and each attribute for the input will be on a seperate lines
	    <input
	        id=
		...
		...
now we know that we need an id="search" to match the htmlFor from above
we also want to set the type to equal a "text" input
and then we need a placeholder this will say the same thing as the label v05.07.30
then we have value and set this equal to {search} and 
search is what we passed into this Nav.js as a prop thus its a controlled input
and then just like a controlled input, the onChange needs to set the search
and we do this with an anonymous function with the event e
and then we setSearch using setSearch and pass in e.target.value
and this makes this a controlled form input
then close the input tag

        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
        </form> 

        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label
            <label htmlFor
            <label htmlFor=
            <label htmlFor="search"
            <label htmlFor="search"></label>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id=
	        id="serach"
	        type=
	        type="text"
	        placeholder=
	        placeholder="Search Posts"
	        value=
	        value={search}
	        onChange=
	        onChange={() =>}
	        onChange={(e) => setSearch()}
	        onChange={(e) => setSearch(e.target.value)}
	    />
        </form> 

so far we have

const Nav = ({ search, setSearch }) => {
  return (
    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id="serach"
	        type="text"
	        placeholder="Search Posts"
	        value={search}
	        onChange={(e) => setSearch(e.target.value)}
	    />
        </form> 
    </nav>
  )
}

export default Nav


so we save
then we are going to have to create the search and setSearch back in the App
in order to pass those into the Nav component
But before we do that, we need to finish the Navigation within the Nav component
so we add an unordered list <ul>
and now each list item can be a navigation <li> link 
but we have not yet imported the link from react router yet so lets do that at the top
import { Link } from 'react-router-dom';

        </form> 
        <ul></ul> 
    </nav>

        </form> 
        <ul>
        </ul> 
    </nav>

        </form> 
        <ul>
            <li></li>
        </ul> 
    </nav>


so we have

import { Link } from 'react-router-dom';

const Nav = ({ search, setSearch }) => {
  return (    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id="serach"
	        type="text"
	        placeholder="Search Posts"
	        value={search}
	        onChange={(e) => setSearch(e.target.value)}
        </form> 
        <ul>
            <li></li>
        </ul> 
    </nav>
    </nav>
  )
}

export default Nav

now we save and this
and use the <Link as we import it
and links render to anchor tags just like we see in html such as <a href>
however here this tells react-router that 
"dont request this link from the server, just route to the proper component"
so now instead of an href="" we use a to="" and set the to equal a slash 
for our Home page
and so there we have the link to Home

            <li></li>
            <li><Link to=""></li>
            <li><Link to="/"></li>
            <li><Link to="/">Home</li>

now we use SHIFT ALT DOWNARROW to make 2 more links
and now we link these to other pages
we have a link to post and text is Post
and a link to about and text is About		v05.09.39

            <li><Link to="/">Home</li>
            <li><Link to="/">Home</li>
            <li><Link to="/">Home</li>

            <li><Link to="/">Home</li>
            <li><Link to="/post">Post</li>
            <li><Link to="/about">About</li>


so we have

import { Link } from 'react-router-dom';

const Nav = ({ search, setSearch }) => {
  return (    <nav className="Nav">
        <form className="searchForm" onSubmit={(e) => e.preventDefault()}>
            <label htmlFor="search">Search Posts</label>
	    <input
	        id="serach"
	        type="text"
	        placeholder="Search Posts"
	        value={search}
	        onChange={(e) => setSearch(e.target.value)}
        </form> 
        <ul>
            <li><Link to="/">Home</li>
            <li><Link to="/post">Post</li>
            <li><Link to="/about">About</li>
        </ul> 
    </nav>
    </nav>
  )
}

export default Nav


and this will handle the links in our page
so we save these
and now we see the different links in the Chrome app 
where css has already applied itself and 
Links across the top of the app are		Home Post About
When you click Post then the page renders to NewPost
When you click Home then the page renders to Home
When you click About then the page renders to About 
so this shows that our links are working

Now we still have not yet created our state with search and setSearch
so lets go back to the App.js and do this
this means create our state with search and setSearch			v05.10.06

from App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}


To create our state with search and setSearch
we need to change the code inside App() function
we want to define both search and setSearch as arrays
and then we set that equal to useState and
we need an empty string for those as we start this
but then we will have search results that will be stored inside an array
Also while we are in App.js and creating state, we will need some data
to search thru and so for now, we will hard code our posts for this dev environment
and we can worry about hooking those posts to an API later.
We will have posts and setPosts for our blog posts
and this will equal useState
but this will have an array inside it []
so for now we will hardcode 4 posts
and we will just paste those 4 hardcoded posts in --> see below for pasted in code block.

  const []
  const [search, setSearch]
  const [search, setSearch] = 
  const [search, setSearch] = useState()
  const [search, setSearch] = useState('');

  const [posts,]
  const [search, setSearch] = useState('');

  const [posts, setPosts]
  const [search, setSearch] = useState('');

  const [posts, setPosts] = useState()
  const [search, setSearch] = useState('');


so we have 

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState()			<<<<<<<Hard code 4 posts into this useState()
  const [search, setSearch] = useState('');

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}



hard coded here
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }


so we have 

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])
  const [search, setSearch] = useState('');

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav />
       <Switch>		
         <Route exact path="/"
           <Home />
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

so here you can see
its an array objects

[
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },

and each object is a post

        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },

and each post has 4 different properties id, title, datetime, and body.
These are 4 test posts.
So now we have posts and setPosts using state as well.

Now we need to create the other state 
we will start with an empty array for the search Results

  const [posts, setPosts] = useState()			<<<<<See above for 4 hardcoded posts
  const [search, setSearch] = useState('');		
  const []					<<<<<now in v05.11.33 we address other state

  const []		
  const [searchResults, setSearchResults]
  const [searchResults, setSearchResults] = useState()
  const [searchResults, setSearchResults] = useState([]);


v05.12.01

Now we need to update our Nav component by passing in both
the search and setSearch 
and now our Nav component is complete and we will be able to search the 
existing posts here once we put in some more functionality
       <Nav />
       <Nav search={search} setSearch={setsearch}/>

so we also need to update the JSX with posts for the Home component
as we are passing them in to be displayed in a feed there
           <Home />
           <Home posts={posts}/>

return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav search={search} setSearch={setsearch}/>		<<<<<<<<<<<<<<HERE
       <Switch>		
         <Route exact path="/"
           <Home posts={posts}/>				<<<<<<<<<<<<<<HERE
         </Route>


so now we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav search={search} setSearch={setsearch}/>		<<<<<<<<<<<<<<HERE
       <Switch>		
         <Route exact path="/"
           <Home posts={posts}/>				<<<<<<<<<<<<<<HERE
         </Route>

         <Route exact path="/post"
           <NewPost />
         </Route>	

         <Route path="/post/:id">
           <PostPage />
         </Route>

         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

now save
Control B to see file tree
and now we want to work on the Home component
in the Chrome app, click on Home to see the rendering

we have Home.js component

const Home = () => {
  return (
    <main>
        <h1>Home</h1>
    </main>
  )
}

export default Home


so now Home component will receive the posts 
and we have a main element here, 
so lets put a className on the main element
this className is going to equal Home
save this and see if we see a change?

const Home = () => {
const Home = ({ posts }) => {

    <main>
    <main className="Home">


Yes, there is a change from 		Home
					Footer

to just 				Home

it just pushes everything down
and Footer is now at the bottom of the page
so the style for this set to Flexbox so everything in this column should be equal
except the main element has a Flexbox grow value of 1
so it fills up the space and grows out.
So when we provide the main element with the proper class it now fills out our entire page.

Inside the main element of Home now		v05.13.26
       <h1>Home</h1>

we dont want the h1 so we delete it
we want to work with the post to display it
so we check the posts length with a ternary
if length then display a Feed component
that receives the posts by drilling down with prop drilling
and if it does not have length, then we need to add the :
and add a ().  Then () gets a paragraph tag			<p
set the p style and add = {{}} two curly braces
set the marginTop: to "2rem"								v05.14.20
then close the opening p tag and add the closing p tag paragraph tag  	</p>
add the text for the paragraph No posts to display.

        {}
        {posts.length }
        {posts.length ? ()}
        {posts.length ? (
        )}
        {posts.length ? (
            <Feed
        )}

        {posts.length ? (
            <Feed posts={}
        )}

        {posts.length ? (
            <Feed posts={posts}
        )}

        {posts.length ? (
            <Feed posts={posts} />
        ) : {}}

        {posts.length ? (
            <Feed posts={posts} />
        ) : ()}

        {posts.length ? (
            <Feed posts={posts} />
        ) : (
            <p
        )}

        {posts.length ? (
            <Feed posts={posts} />
        ) : (
            <p style={{ marginTop: "2rem" }}
        )}


        {posts.length ? (
            <Feed posts={posts} />
        ) : (
            <p style={{ marginTop: "2rem" }}>
                No posts to display.
            </p>
        )}


save this
an error shows in the Chrome app
b/c we have not yet created the Feed to import it yet
so lets create a Feed component

New file in src
Feed.js
CONTROL ALT R
_rafce

so we have Feed.js

const Feed = () => {
    return (
        <div>
        </div>
    )
}

export default Feed

now we leave the Feed component blank for now 
as it resolve the error from above
But we still need to import that Feed.js into Home.js

so we have Home.js

import Feed from './Feed';

const Home = ({ posts }) => {
  return (
    <main className="Home">
        {posts.length ? (
            <Feed posts={posts} />
        ) : (
            <p style={{ marginTop: "2rem" }}>
                No posts to display.
            </p>
        )}
    </main>
  )
}

export default Home

save
reload the App in Chrome 

Now the error in the Chrome app will disappear
b/c we solved for the error
Page will be blank b/c Feed is empty

Now we can work on the Feed component here

we have Feed.js

const Feed = () => {
    return (
        <div>
        </div>
    )
}

export default Feed

note that Feed is also receiving the Posts
so Feed ingests the posts
and inside the JSX, we need to map thru those posts
but lets first remove the <div> and make it an html fragment		v05.15.52
        <>
        </>
Then we add {posts.map()}				{posts.map()}
we map thru each post with the arrow function		{posts.map(post => ())}
then we need a post component which is a 
a resuable component for each post			<Post
and the reusable component will need a key		key=
as you map thru {post.id}				{post.id}
then we also pass the full post to the component	post={post}
then we close out this component			/>

	    {posts.map()}
	    {posts.map(post => ())}
	    
	    {posts.map(post => (
	    ))}	    
	    
	    {posts.map(post => (
	        <Post
	    ))}

	    {posts.map(post => (
	        <Post key={post} post={post} />
	    ))}

so far we have	v05.16.24

const Feed = ({ posts }) => {
    return (
        <>
	    {posts.map(post => (
	        <Post key={post} post={post} />
	    ))}

        </>
    )
}

save this
should create an error
so need to create Post.js component

new file
Post.js

CONTROL ALT R
_rafce

const Post = () => {
  return (
    <div>
    </div>
  )
}

export default Post

now we have the Post component
its empty 
but just save it

Now back to Feed.js
we need to import the Post.js

import Post from './Post';

const Feed = ({ posts }) => {
    return (
        <>
	    {posts.map(post => (
	        <Post key={post} post={post} />
	    ))}

        </>
    )
}

save
now the error goes away
but post will still be empty b/c we have not created a post yet
so now lets work on the Post component

in the Post component starting at the top, 
we will need to import 				import { Link } from react router
and now that we have this, 			const Post = () => {
we know we are receiving a post			
so we destructure that at the top 		const Post = ({ post }) => {
now we make the <div> and <article>
and give a article className as well		<article className="post">

so far we have Post.js

import { Link } fro 'react-router-dom';

const Post = ({ post }) => {
  return (
    <article className="post">

    </article>
  )
}

export default Post


then we create a react router thus it has a capital L for Link 		<Link
with the Link we have a to=						to=
now lets make this an expression 	{}
we use a template literal inside	`/post/${}`
inside the template literal we use 	${post.id}
why? this takes us to the individual post
close the tag	        		</Link>
Now inside the link we have an h2	<h2></h2>
and inside the h2 we add {post.title}	{post.title}
and then we also have a paragraph	<p>
lets give this a className="postDate"	<p className="postDate">
add the closing tag			</p>
we need text for the p line 		<p>{}</p>
which is the post.datetime value	{post.datetime}
this text renders for each post as text
Now both the post.title and the post.datetime
will be linked to the specific parameter of post.id

    <article className="post">

    </article>

    <article className="post">
        <Link
    </article>

    <article className="post">
        <Link to={}
    </article>

    <article className="post">
        <Link to={`/post/${}`}
    </article>

    <article className="post">
        <Link to={`/post/${post.id}`}>
        </Link>
    </article>

    <article className="post">
        <Link to={`/post/${post.id}`}>
            <h2>{post.title}</h2>
            <p className="postDate">{}</p>
        </Link>
    </article>

    <article className="post">
        <Link to={`/post/${post.id}`}>
            <h2>{post.title}</h2>
            <p className="postDate">{post.datetime}</p>
        </Link>
    </article>


so far we have this

import { Link } fro 'react-router-dom';

const Post = ({ post }) => {
  return (
    <article className="post">
        <Link to={`/post/${post.id}`}>
            <h2>{post.title}</h2>
            <p className="postDate">{post.datetime}</p>
        </Link>
    </article>
  )
}

export default Post

we are not done here
after the closing Link tag </Link>, we need			v05.18.58
to add a <p> with a p className		<p className="postBody"
add a closing p tag			></p>
we need text inside the p tags
it will be an expression 		{ternary}
inside the expression we add a ternary statement	(post.body)
take the length of that (post.body)			(post.body).length
if the length is <= 25					<= 25
if this is true ?					?
then just display the full post body			post.body
(ie the entire post has 25 characters or less)
but if it is false :					:
start with template literal				`${}`
add the entire post.body like this (post.body)		(post.body)
then we slice the first 25 characters			.slice(0, 25)
and after that we put an elipses which is three dots	...
those ... 3 dots are just text to be rendered on the screen
this will allow the user to click on the full length above	
to see the full post with all its text (ie code from above)    <Link to={`/post/${post.id}`}>
	
        </Link>
        <p className="postBody"></p>

        <p className="postBody">{}</p>{
            (post.body)
        }

        <p className="postBody">{}</p>{
            (post.body).length
        }

        <p className="postBody">{}</p>{
            (post.body).length <= 25
        }

        <p className="postBody">{}</p>{
            (post.body).length <= 25
            ?
        }

        <p className="postBody">{}</p>{
            (post.body).length <= 25
            ? post.body
        }

        <p className="postBody">{}</p>{
            (post.body).length <= 25
            ? post.body
            : `${}`
        }

        <p className="postBody">{}</p>{
            (post.body).length <= 25
            ? post.body
            : `${(post.body)}`
        }

        <p className="postBody">{}</p>{
            (post.body).length <= 25
            ? post.body
            : `${(post.body).slice(0, 25)}...`
        }

so far we have this

import { Link } fro 'react-router-dom';v 

const Post = ({ post }) => {
  return (
    <article className="post">
        <Link to={`/post/${post.id}`}>
            <h2>{post.title}</h2>
            <p className="postDate">{post.datetime}</p>
        </Link>
        <p className="postBody">{
            (post.body).length <= 25
            ? post.body
            : `${(post.body).slice(0, 25)}...`
        }</p>
    </article>
  )
}

export default Post

save
reload app
now we can see our feed with each post in Chrome
we used Lorem ipsum in each post so the text is the same
we can see the first 25 characters
then we get the elipses
the post title text link to the individual post
the individual post page will support showing the details
of the full post body text
as it grabs the parameter out of the url
Next we design the PostPage

CONTROL B to show file tree
select PostPage.js
CONTROL B to hide file tree			v 05.20.46

PostPage.js

inside the PostPage we need to import a couple of things so lets do this now
import useParameters which is a custom hook 
import {}
and destructure here so add those destructures inside the { xxx }

that comes with react-router-dom		import { useParams, }
and we also import Link				import { useParams, Link }
from "react-router-dom"
now the imports are done we will receive a couple things as 
props based upon those destructured imports

so we have 

import { useParams, Link } from "react-router-dom";

const PostPage = () => {
  return (
    <main>
        <h1>PostPage</h1>
    </main>
  )
}

export default PostPage


now given							const PostPage = () => {
so within the const PostPage anonymous function we receive  	const PostPage = ({}) => {
props that we receive are 		the posts		({ posts, })
we also receive the 			handleDelete function	({ posts, handleDelete})
why? we will be offering a Delete button on this page 
so these are the props coming into the page

const PostPage = () => {
const PostPage = ({}) => {
const PostPage = ({ posts, }) => {
const PostPage = ({ posts, handleDelete }) => {

now we have PostPage.js

import { useParams, Link } from "react-router-dom";

const PostPage = ({ posts, handleDelete }) => {
  return (
    <main>
        <h1>PostPage</h1>
    </main>
  )
}

export default PostPage

this is equal to useParams
this means the id 

now we define the id inside the function and this is equal to useParams
				function App() {
				  const [posts, setPosts] = useState([
				        {
				          id: 1,			<<<<<<<HERE defined parameter

we have PostPage.js

import { useParams, Link } from "react-router-dom";

const PostPage = ({ posts, handleDelete }) => {
    const {}	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<BUILD HERE
    return (
      <main>
          <h1>PostPage</h1>
      </main>
    )
}

export default PostPage

    const {}
    const { id }
    const { id } = 
    const { id } = useParams();			v05.21.41
    
note we referenced id here b/c that is what we called it in our 
Route back in App.js when we defined the parameter
now we know that we called it id so we build the useParams function

now once we have the overall posts here, we need to get the individual 
posts that we want to display				const post = 
this equals posts.find
then we need to access that individual post		const post = posts.find(post => )
and we grab that individual post.id			const post = posts.find(post => (post.id))
then se that individual post.id to a string
why string? b/c it is really numeric, so if we didnt set it to a string
then we could only use two equals == 
but this author prefers to use strict equals when possible
but in order to use strict equals we need to match the incoming id to the parameter id
and the parmeter id is a string. 

    const post = 
    const post = posts.find()
    const post = posts.find(post => ())
    const post = posts.find(post => (post.id))
    const post = posts.find(post => (post.id).toString())
    const post = posts.find(post => (post.id).toString() === id);

so note, if you dont set this to a string, then you must use the == 
but we prefer the === here

so now we have PostPage.js

import { useParams, Link } from "react-router-dom";

const PostPage = ({ posts, handleDelete }) => {
    const { id } = useParams();
    const post = posts.find(post => (post.id).toString() === id);
    return (
      <main>
          <h1>PostPage</h1>
      </main>
    )
}

export default PostPage

now with the main element inside the JSX
we set the className to "PostPage"      			<main className="PostPage">
then after this, we have an article tag with className="post"	<article className="post">
lets delete the h1 element
now inside the article, it will depend on whether we have a post to display or not
so if we have a post		{post}
&& (ie True and True, then)
add line to break up and make reading clearer
add a fragment		<> </>
the fragment is for the parent
and inside the fragment we can put our other elements <h2></h2>
and inside the h2 we add post.title		<h2>{post.title}</h2>

      <main>
          <h1>PostPage</h1>
      </main>

      <main className="PostPage">
          <h1>PostPage</h1>
      </main>

      <main className="PostPage">
          <article className="post">
              <h1>PostPage</h1>
          </article>
      </main>

      <main className="PostPage">
          <article className="post">
              {post && }
          </article>
      </main>

      <main className="PostPage">
          <article className="post">
              {post && 
                  <>
                  </>
              }
          </article>
      </main>

      <main className="PostPage">
          <article className="post">
              {post && 
                  <>
                      <h2>{}</h2>
                  </>
              }
          </article>
      </main>

      <main className="PostPage">
          <article className="post">
              {post && 
                  <>
                      <h2>{post.title}</h2>
                  </>
              }
          </article>
      </main>


then after <h2>{post.title}</h2>
then next we add a paragraph with the className="postDate"
and inside the <p> tags for text we add {post.datetime}
now copy this line SHIFT ALT DOWNARROW
change 2nd postDate class Name to postBody
and accordingly the text expression will be post.body
and then finally we need our delete button	<button
lets give it an onClick={}
and inside the {} we get an anonymous function
and inside the anonymous function we call 	handleDelete
but we need to pass in () the post.id		handleDelete(post.id)
then we close out the button element		>
and display on the button is 			Delete Post		v05.25.00

                  <h2>{post.title}</h2>

                  <h2>{post.title}</h2>
                  <p className="postDate">{post.datetime}</p>

                  <h2>{post.title}</h2>
                  <p className="postDate">{post.datetime}</p>
                  <p className="postDate">{post.datetime}</p>

                  <h2>{post.title}</h2>
                  <p className="postDate">{post.datetime}</p>
                  <p className="postBody">{post.body}</p>

                  <h2>{post.title}</h2>
                  <p className="postDate">{post.datetime}</p>
                  <p className="postBody">{post.body}</p>
                  <button

                  <button
                  <button onClick={}
                  <button onClick={() => }
                  <button onClick={() => handleDelete}

                  <button onClick={() => handleDelete()}

                  <button onClick={() => handleDelete(post.id)}

                  <button onClick={() => handleDelete(post.id)}>

                  <button onClick={() => handleDelete(post.id)}>
                      Delete Post
                  </button>


so now we have PostPage.js

import { useParams, Link } from "react-router-dom";

const PostPage = ({ posts, handleDelete }) => {
    const { id } = useParams();
    const post = posts.find(post => (post.id).toString() === id);
    return (
      <main className="PostPage">
          <article className="post">
              {post && 
                  <>
                      <h2>{post.title}</h2>
                      <p className="postDate">{post.datetime}</p>
                      <p className="postBody">{post.body}</p>
                      <button onClick={() => handleDelete(post.id)}>
                          Delete Post
                      </button>
                  </>
              }
          </article>
      </main>
    )
}

export default PostPage

v05.25.00
so now we know we need a handleDelete function that is coming in a prop
and it receives an id

So we need to add those props into App.js which are then passed into PostPage
from App.js

           <PostPage />
           <PostPage posts={posts} handleDelete={handleDelete} />

so save

note we have an error showing.
TypeError: cannot read property 'find' or undefined
This is b/c we see that PostPage is looking for props to be passed in 
	   const PostPage = ({ posts, handleDelete }) => {
but we have not passed in any props yet from App.js
           <PostPage />


and inside App.js above the return statement we need to define handleDelete

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  return (

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const handleDelete = <<<<<<<<<<<<<<<<<<ADD HERE
  return (

  const handleDelete = <<<<<<<<<<<<<<<<<<ADD HERE
  const handleDelete = (id) => {}
  const handleDelete = (id) => {
    // add details, leave empty for nows
  }


so save
reload app
this works for now


so we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const handleDelete = (id) => {
    // add details, leave empty for nows
  }

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav search={search} setSearch={setsearch} />
       <Switch>		
         <Route exact path="/"
           <Home posts={posts}/>
         </Route>
         <Route exact path="/post"
           <NewPost />
         </Route>	
         <Route path="/post/:id">
           <PostPage posts={posts} handleDelete={handleDelete} />		<<<<<<<HERE
         </Route>
         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

v05.26.24


Now back in the PostPage.js

we have not quite finished our definition 
yet b/c what happens if we dont have a post?
so add {!post && }
this means if post is not true		 {!post && }
then we have an html fragment
with an h2 saying Post Not Found
and a paragraph tag saying Well, that's disappointing.
then a paragraph tag and Link to visit the homepage.
Now notice that Link was imported at the top of this component.
					import { useParams, Link } from "react-router-dom";
so now we are using the useParams from react router to get the parameter
   					const { id } = useParams();
and we are using Link to provide a link back to the homepage if it doesnt exist

                <>
                  <h2>Post Not Found</h2>
                  <p>Well, that's disappointing.</p>
                  <p>
                      <Link to='/'>Visit Our Homepage</Link>
                  </p>
                </>


and PostPage.js code is

      <main className="PostPage">
          <article className="post">
              {post && 
                  <>
                      <h2>{post.title}</h2>
                      <p className="postDate">{post.datetime}</p>
                      <p className="postBody">{post.body}</p>
                      <button onClick={() => handleDelete(post.id)}>
                          Delete Post
                      </button>
                  </>
              } 			<<<<<<<<<<<<<<<<ADD HERE IF DONT HAVE A POST
          </article>


              }
              {!post && }
          </article>


              }
              {!post && 
                  <>
                  <h2>Post Not Found</h2>
                  <p>Well, that's disappointing.</p>
                  <p>
                      <Link to='/'>Visit Our Homepage</Link>
                  </p>
              }
          </article>



so lets save all this
reload app
notice useParams is already working as we wanted My First Post
and this is what we got from the url		localhost:3000/post/1
if we switch the url to post #4			localhost:3000/post/4
then we should get My Fourth Post
but notice if try and load post #5 which does not yet exist
we will get a properly captured error showing
	Post Not Found
	Well that's disappointing.

	Visit Our Homepage (underlined link)

and if we click on the link, it takes us to the Home page	v05.27.44

lets finish defining our handleDelete function in App.js
what will happen? we receive the post id here 			(id)
so then we can just define our postsList 		    	const postsList
and set it equal to posts.filter()
and inside filter() we have a post 			posts.filter()
wherein if the post.id 					(post => 
is not equal to the id					post.id !== id 
then we include it in the posts list
so we are filtering out 
wherein if the posts.filter(post => post.id is not equal to the id

ie if the post.id is NOT equal to the id then it IS included in the list
ie we are filtering out the posts that have the id we have passed in

  const handleDelete = (id) => {
    // add details, leave empty for nows
  }

  const handleDelete = (id) => {
    const postsList = 
  }

    const postsList = 
    const postsList = posts.filter()
    const postsList = posts.filter(post => )
    const postsList = posts.filter(post => post.id !== )
    const postsList = posts.filter(post => post.id !== id);

(ie so now we have) 

  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
  }

then from here we just setPosts to the newly updated postsList that does not have that unwanted id

  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
  setPosts(postsList);
  }

and now we want to use our browser history 
we click the Delete button 
but we are on the individual post page
so we can do that (browser history) with the useHistory hook 
that we are importing in App.js from react-router-dom

  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
    setPosts(postsList);
  }

but still not yet done
now underneath where we set the useState in App.js

we need to update the app to useHistory and use that specific history 
inside our handleDelete function
so we add const history which is equal to useHistory

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  // add line here

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const history

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const history = useHistory();

now after we have defined history, we can then use history via useHistory
inside our handleDelete function
so we say history.push						    history.push()
and we just push in the route to the Home page by adding '/'	    history.push('/');
so as part of the function we are accessing the browser history
with react-router and then we are serving the component
instead of requesting anything from the server
ie we are serving the component that is routed to that home diretory listing


  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
    setPosts(postsList);
    // add here
  }

    // add here
    history.push()
    history.push('/');



so for App.js we have

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const history = useHistory();

  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
    setPosts(postsList);
    history.push('/');
  }


so save
reload app
localhost:3000
click on My 3rd Post
click on button Delete Post
now 3rd Post is deleted
and Home posts show only My First Post, My 2nd Post, My Fourth Post
ie 3rd Post was deleted

Now note something ***
b/c we have hardcoded our posts in our state when we completely reload the application
we then get My 3rd Post back again! This is b/c My 3rd Post is hard coded into state

We now need to work on the NewPost component.
Why? as of now the first four posts are hardcoded into App.js

so we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const history = useHistory();

  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
    setPosts(postsList);
    history.push('/');
  }

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav search={search} setSearch={setsearch} />
       <Switch>		
         <Route exact path="/"
           <Home posts={posts}/>
         </Route>
         <Route exact path="/post"
           <NewPost />
         </Route>	
         <Route path="/post/:id">
           <PostPage posts={posts} handleDelete={handleDelete} />
         </Route>
         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

v05.29.57

We now need to work on the NewPost component.				v05.29.57
Why? as of now the first four posts are hardcoded into App.js
so the 3rd post returns to the state even after it was deleted

We now need to work on the new post component
but before we do this, we need to create some more state inside our app	    <<<<<<<<<<<<

so App.js is here

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const history = useHistory();

Updated code here

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const []				 				    <<<<<<<<<<<< create more state
  const history = useHistory();

description of logic
const for postTitle and setPostTitle			 const [postTitle, setPostTitle]
this will be equal to useState with an empty string	('')
now copy that line once, paste below
add postBody and setPostBody and this is also equal to an empty string
so we have 4 objects here 	postTitle, postBody, setPostTitle, setPostBody
now we need to pass these 4 objects all in as props into our new post component
but we also need a handleSubmit function as we submit a new post
for now make this an empty anonymous function
now we can define handleSubmit when we are ready

Lets down to the JSX in App.js and pass all of these props into <NewPost />
and now NewPost will be receiving more than most of our other components
here handleSubmit equals {handleSubmit}
then on next line postTitle={postTitle}
then we have setPostTitle={setPostTitle}
then we have postBody={postBody}
then we have setPostBody={setPostBody}

  const []

  const [postTitle, setPostTitle]

  const [postTitle, setPostTitle] = useState()

  const [postTitle, setPostTitle] = useState('');

  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');


  const handleSubmit
  const handleSubmit = () => {}
  const handleSubmit = () => {
  }

           <NewPost />

           <NewPost 
             handleSubmit={handleSubmit}
             postTitle={postTitle}
             setPostTitle={setPostTitle}
             postBody={postBody}
             setPostBody={setPostBody}
           />

save

so we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';

function App() {
  const [posts, setPosts] = useState([
        {
          id: 1,
          title: "My First Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 2,
          title: "My 2nd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 3,
          title: "My 3rd Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        },
        {
          id: 4,
          title: "My 4th Post"
          datetime: "July 01, 2023 11:17:36 AM"
          body: "Lorem ipsum dolor sit amet consectuor elit."
        }
      ])

  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const history = useHistory();

  const handleSubmit = () => {
  }

  const handleDelete = (id) => {
    const postsList = posts.filter(post => post.id !== id);
    setPosts(postsList);
    history.push('/');
  }

  return (
     <div className="App">
       <Header title="React JS Blog"/>
       <Nav search={search} setSearch={setsearch} />
       <Switch>		
         <Route exact path="/"
           <Home posts={posts}/>
         </Route>
         <Route exact path="/post"
           <NewPost 
             handleSubmit={handleSubmit}
             postTitle={postTitle}
             setPostTitle={setPostTitle}
             postBody={postBody}
             setPostBody={setPostBody}
           />
           <NewPost />
         </Route>	
         <Route path="/post/:id">
           <PostPage posts={posts} handleDelete={handleDelete} />
         </Route>
         <Route path="/about" component={About} />
         <Route path="*" component={Missing} />

       </Switch>
       <Footer />
     </div>
  )
}

then we need to update NewPost.js
now inside NewPost we have a lot to destructure as we pass in all those props
handleSubmit, postTitle, setPostTitle, postBody, setPostBody
these are all coming in as de-structured props
save

const NewPost = () => {
const NewPost = ({}) => {
const NewPost = ({
    handleSubmit, postTitle, setPostTitle, postBody, setPostBody
}) => {

now add className to the main element

    <main>
    <main className="NewPost">

now save and should see the change in Chrome app
now NewPost shows on left side of app with new formatting
save
change the NewPost h1 element to an h2 and add space in the text
        <h1>NewPost</h1>
        <h2>New Post</h2>

now the next element to add the JSX is a form as are submitting a new post
with a className equal to "newPostForm"
and lets give this an onSubmit but it might be different than you expect
instead of a preventDefault here we want {handleSubmit}
Now note that this still receives the event 
we do not have to have an anonymous function and specify e inside
if we just give a reference to a function like this, it will STILL receive
the event and we can refer to that event inside the function
Lets add a label element for our input		<label htmlFor="postTitle"
note, we dont hide this label
finish the label code				>Title:</label>
Now we can add our input for the title		<input
with attributes for this input on seperate lines	id="postTitle"
note that the id needs to match the htmlFor attribute
with type equal to text				type="text"
we will make this required so the form will not submit without it
and this will be a controlled input so its value={postTitle}
and setting this as a controlled input means we need an onChange
and we set the onChange equal to {()} an anonymous function		{(e) => }
and for that anonymous function we have setPostTitle=(e.target.value)
so this is a controlled input and this hooks it all up and now we close out that input
But we are not done here. We need the post body as well 
so we need another label element with an htmlFor			<label htmlFor
and this will be ="postBody"						="postBody"
for the text we just add Post:						Post:
close out the label tag but still not done. 				/>
Now this will not just be an input that is a type text

        <form>
        <form className="newPostForm">
        <form className="newPostForm" onSubmit=>
        <form className="newPostForm" onSubmit=>{handleSubmit}

	    <label
	    <label htmlFor=
	    <label htmlFor="postTitle">Title:</label>

	    <input
	        id="postTitle"
	        type="text"
	        required
	        value={}
	        onChange={(e) => setPostTitle(e.target.value)}
	    />

	    <label
	    <label htmlFor
	    <label htmlFor="postBody"
	    <label htmlFor="postBody">Post:
	    <label htmlFor="postBody">Post:</label>

so we make it a little bit larger with a textarea			<textarea
lets put the attributes for the textarea on seperate lines
id will be equal to "postBody"						id="postBody"
we do not need to set the type b/c textarea is text by default	v05.35.03
we make this required
lets make this a controlled input as well so the value is {postBody}	value={postBody}
and we received postBody as a prop
and then we need to put an onChange and set that equal to 		onChange={}
an anonymous function () =>
with (e) and inside the function we have 				(e)
=> setPostBody and that be e.target.value				==> setPostBody(e.target.value)
then close out the anonymous function					}
and now lets close out that textarea input				/>

	    <textarea
	        id="postBody'
	        required
	        value={postBody}
	        onChange={(e) => setPostBody(e.target.value)}
	    />
	        

v05.35.39

we still need a button
insert this below the textarea but above the form closing tag
add a <button element
type will be a "submit" button
close the opening button tag
closing button tag automatically inserted by VSCode
text for the button is Submit
that should finish our form
we see all this in the rendered page
we see the Title: field
we see the Post: field
we see the Submit button

	    />
	    <button
	    <button type="submit" \>
	    <button type="submit" \></button>
	    <button type="submit" \>Submit</button>

Note that we can not test this yet b/c
we have not yet defined our handleSubmit in

const NewPost = ({
    handleSubmit, postTitle, setPostTitle, postBody, setPostBody
}) => {

we have also not yet defined setPostTitle

go back to App.js 	v05.36.31
and find the handleSubmit function
the handleSubmit reference still receives the event e even without the anonymous
function specifying it in the NewPost component
so we just put the e in the event for the parameter
and now we build this out
lets call e.preventDefault at the very beginning of the function
after that we need to define the id for the new post
so lets set the id equal to				const id =
and check to see if the post has any length		post.length ?
and if it does then the post already exists 
and is not empty 
so then we need to get the last post 			
so we call the posts array				posts[]
to get the last post we call 				posts.length - 1 
b/c the array starts counting at 0
b/c to get the length need to count all the posts
normally you count from 1 to get the total 
but since array starts at 0 you need to subtract that 1
to the actual last post index
And then after getting that last index
we need to reference the id property of that last post		.id
and then we add + 1 to it 				+ 1
but 							:
if posts do not have length then the array is empty
and then we assign id 1 to it				1;

  const handleSubmit = () => {
  }

  const handleSubmit = (e) => {
  }

  const handleSubmit = (e) => {
    const id
  }

  const handleSubmit = (e) => {
    const id = post.length ?
  }

  const handleSubmit = (e) => {
    const id = post.length ? posts[]
  }

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1]
  }

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id
  }

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id + 1
  }

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id + 1 : 
  }

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
  }

note that now that we have defined the id, we also 
need to define a datetime value				const datetime
set to empty string for now				= '';

  const datetime
  const datetime = '';

thus so far we have 

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
  const datetime = '';
  }


now we need to import a dependency package that we have not yet imported
open terminal window CONTROL `
need to stop running existing dev version of our app so CONTROL C
CONTROL C
in terminal type $ npm i date-fns which stands for date functions
then -S which stands for Save As Production Dependency

$ npm i date-fns -S
ENTER

our new dependency has finished installing
CONTROL B to see file tree
go to file package.json
and you can see "date-fns": "^2.22.1",
which is the dependency package
so close package.json file
hide file tree
now at top of App.js we need to import this new dependency

note we just want the format part of the package so we will destructure it
as its imported so to destructure use 			import { format } from '';

so we have App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home';
import NewPost from './NewPost';
import PostPage from './PostPage';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';


save
now go to function that we were working on handleSubmit in App.js
we can apply the format in the datetime
delete the empty string
type format()
we need a new Date object 				new Date() 
then we specify the format


  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
  const datetime = ;
  }

  const datetime = '';
  const datetime = ;
  const datetime = format();
  const datetime = format(new Date(), '');

v05.39.22

format is mmmm dd yyyy but note that you must add the exact format you want
'MMMM dd, yyyy pp';
pp is needed but not sure why. Consult package documentation at npmjs.org

now we need to create our new post				const newPost
so far we have

  const handleSubmit = (e) => {
    const id = post.length ? posts[posts.length - 1].id + 1 : 1;
  const datetime = format(new Date(), 'MMMM dd, yyyy pp');
  // create new post here (see below)
  // create new array with all posts (see below)
  }


first thing we have in the post is the id
then we specify the title					title: postTitle,
then we specify the datetime					datetime,
then we specify the post body itself which is			body: postBody
this finishes our new post;					;

     const newPost
     const newPost = {}
     const newPost = { id, }
     const newPost = { id, title: postTitle, }
     const newPost = { id, title: postTitle, datetime, }
     const newPost = { id, title: postTitle, datetime, postBody }
     const newPost = { id, title: postTitle, datetime, postBody };

now we need to create a new array with all posts		const allPosts
so we set this equal to ...posts this means the posts that are in state
and the new post						newPost

     const allPosts
     const allPosts = []
     const allPosts = [...posts, newPost];

now that we have our allPosts
***we need to set the new state using existing allPosts***
this is important as it captures the new state of our application 
without needing to hardcode new posts like before

     setPosts(allPosts);					v05.40.48

then we set the post Title back to empty

     setPostTitle('');

App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import api from './api/posts';

function App() {
  const [posts, setPosts] = useState([])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editBody, setEditBody] = useState('');
  const history = useHistory();


2 terminal windows running
- json server running in terminal 1
- react app running in termainal 2


we will apply a couple of custom hooks

rules for react
1 only call Hooks at the top level, 
  dont call Hooks inside loops, conditions, or nested functions
  Why? by following this rule, you ensure Hooks are
  called in the same order each time a component renders
  Thus Hooks can correctly preserve the state of Hooks between multiple 
  useState and useEffect calls.
  reactjs.org/docs/hooks-rules.html

2 call Hooks from React function components
  Why? by following this rule you ensure all stateful logic in a component
  is clearly visible from its source code.

3 can call Hooks from custom Hooks


Collection of React Hooks
nikgraf.github.io/react-hooks
more than one hook that accomplishes the same thing b/c it has a different author

npm
react-use

Now back to our own project

Here in VSCode, we have App.js file open
Select src folder
create new folder inside it called hooks
create new file inside hooks folder 
  new file is called useWindowSize.js
import useState and useEffect
const useWindowSize
set this equal to an arrow function  v06.44.20


import {}
import { useState, useEffect }
import { useState, useEffect } from "react";  

const useWindowSize = () => {

}

const useWindowSize = () => {
    const 
}

App.js

import Header from './Header';
import Nav from './Nav';
import Footer from './Footer';
import Home from './Home'; 
import NewPost from './NewPost';
import PostPage from './PostPage';
import EditPost from './EditPost';
import About from './About';
import Missing from './Missing';
import { Route, Switch, useHistory } from 'react-router'dom';
import { useState, useEffect } from 'react';
import { format } from 'date-fns';
import api from './api/posts';

function App() {
  const [posts, setPosts] = useState([])
  const [search, setSearch] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [postTitle, setPostTitle] = useState('');
  const [postBody, setPostBody] = useState('');
  const [editTitle, setEditTitle] = useState('');
  const [editBody, setEditBody] = useState('');
  const history = useHistory();


2 terminal windows running
- json server running in terminal 1
- react app running in termainal 2

we will apply a couple of custom hooks

rules for react
1 only call Hooks at the top level, 
  dont call Hooks inside loops, conditions, or nested functions
  Why? by following this rule, you ensure Hooks are
  called in the same order each time a component renders
  Thus Hooks can correctly preserve the state of Hooks between multiple 
  useState and useEffect calls.
  reactjs.org/docs/hooks-rules.html

2 call Hooks from React function components
  Why? by following this rule you ensure all stateful logic in a component
  is clearly visible from its source code.

3 can call Hooks from custom Hooks


Collection of React Hooks
nikgraf.github.io/react-hooks
more than one hook that accomplishes the same thing b/c it has a different author

npm
react-use

Now back to our own project

Here in VSCode, we have App.js file open
Select src folder
create new folder inside it called hooks
create new file inside hooks folder 		v06.43.38
  new file is called useWindowSize.js
import useState and useEffect b/c we can use these inside our custom hook
every React hook starts with use__________
const useWindowSize
set this equal to an arrow function  v06.44.20
and setWindowSize
these both use state so we need to set the state
so = useState()
and now inside useState we use an { object }
set this to width: undefined 
b/c thats truely what it is at this point
its an undefined value

same for the height

import {}
import { useState, useEffect }
import { useState, useEffect } from "react";  

const useWindowSize = () => {

}

const useWindowSize = () => {
    const [windowSize, setWindowSize]
}

const useWindowSize = () => {
    const [windowSize, setWindowSize] = useState()
}

const useWindowSize = () => {
    const [windowSize, setWindowSize] = useState({  })
}

const useWindowSize = () => {
    const [windowSize, setWindowSize] = useState({ 
        width: undefined,
        height: undefined
    });
}

now our initial state is set
next we add useEffect here
with an arrow function		v06.45.14

const useWindowSize = () => {
    const [windowSize, setWindowSize] = useState({ 
        width: undefined,
        height: undefined
    });

    useEffect()				<<<<<<<<ADD HERE
}

    useEffect()
    useEffect(()=> {})

v06.45.14

    useEffect(()=> {
        
    })

now focus on useEffect dependencies
we want this to run at load time and that is the only time this will run	, [])
now we define a function inside of useEffect called handleResize	const handleResize
this function handles if the window is resized
add an arrow function inside						= () => {}

    useEffect(()=> {
        
    }, [])

    useEffect(()=> {

        const handleResize = () => {}

    }, [])


now we setWindowSize () 
and set state inside of this function	{}

    useEffect(()=> {

        const handleResize = () => {
            setWindowSize({})
        }

    }, [])


so then we start defining the setWindowSize function
with the width					width: 
here we add window.innerWidth	     		width: window.innerWidth
then we add the height				height: 
her we add window.innerHeight			height: window.innerHeight
both of these will track the value of the window size
if this function is called into action
(ie it grabs the innerWidth and innerHeight, then
    that gets inserted into width and height, then
    that gets used by setWindowSize in the handleResize function)	v06.46.11

    useEffect(()=> {

        const handleResize = () => {
            setWindowSize({})
                width:
        }

    }, [])

    useEffect(()=> {

        const handleResize = () => {
            setWindowSize({})
                width: window.innerWidth
        }

    }, [])

    useEffect(()=> {

        const handleResize = () => {
            setWindowSize({})
                width: window.innerWidth
                height: window.innerHeight
        }

    }, [])


v06.46.11
